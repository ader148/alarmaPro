

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Dec  9 16:38:20 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35  0000                     
    36                           ; Version 2.31
    37                           ; Generated 13/10/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F45K50 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  00104C                     __pidataCOMRAM:
    74                           	callstack 0
    75                           
    76                           ;initializer for _retardo
    77  00104C  0064               	dw	100
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	callstack 0
    82  000800  00                 	db	0
    83  000801                     Keypad_Key_Press@F4959:
    84                           	callstack 0
    85  000801  37                 	db	55
    86  000802  38                 	db	56
    87  000803  39                 	db	57
    88  000804  2F                 	db	47
    89  000805  34                 	db	52
    90  000806  35                 	db	53
    91  000807  36                 	db	54
    92  000808  2A                 	db	42
    93  000809  31                 	db	49
    94  00080A  32                 	db	50
    95  00080B  33                 	db	51
    96  00080C  2D                 	db	45
    97  00080D  0D                 	db	13
    98  00080E  30                 	db	48
    99  00080F  3D                 	db	61
   100  000810  2B                 	db	43
   101  000811  00                 	db	0
   102  000812                     __end_ofKeypad_Key_Press@F4959:
   103                           	callstack 0
   104  0000                     _ANSELA	set	3931
   105  0000                     _ANSELE	set	3935
   106  0000                     _ANSELD	set	3934
   107  0000                     _ANSELB	set	3932
   108  0000                     _ANSELC	set	3933
   109  0000                     _PORTD	set	3971
   110  0000                     _PORTDbits	set	3971
   111  0000                     _PORTBbits	set	3969
   112  0000                     _INTCON2bits	set	4081
   113  0000                     _WPUB	set	3973
   114  0000                     _TRISD	set	3989
   115  0000                     _TRISC	set	3988
   116  0000                     _TRISB	set	3987
   117  0000                     _TRISA	set	3986
   118  0000                     _TRISE	set	3990
   119  0000                     _LATC	set	3979
   120  0000                     _LATB	set	3978
   121  0000                     _LATA	set	3977
   122  0000                     _LATD	set	3980
   123  0000                     _LATE	set	3981
   124  0000                     _ACTCON	set	4021
   125  0000                     _OSCTUNE	set	3995
   126  0000                     _OSCCON2	set	4050
   127  0000                     _OSCCON	set	4051
   128  0000                     _LATC0	set	31832
   129  0000                     _TRISA0	set	31888
   130  0000                     _TRISC0	set	31904
   131  0000                     _LATA0	set	31816
   132  000812                     STR_1:
   133  000812  43                 	db	67	;'C'
   134  000813  4C                 	db	76	;'L'
   135  000814  41                 	db	65	;'A'
   136  000815  56                 	db	86	;'V'
   137  000816  45                 	db	69	;'E'
   138  000817  20                 	db	32
   139  000818  41                 	db	65	;'A'
   140  000819  43                 	db	67	;'C'
   141  00081A  54                 	db	84	;'T'
   142  00081B  55                 	db	85	;'U'
   143  00081C  41                 	db	65	;'A'
   144  00081D  4C                 	db	76	;'L'
   145  00081E  00                 	db	0
   146  00081F                     STR_4:
   147  00081F  54                 	db	84	;'T'
   148  000820  45                 	db	69	;'E'
   149  000821  43                 	db	67	;'C'
   150  000822  4C                 	db	76	;'L'
   151  000823  41                 	db	65	;'A'
   152  000824  44                 	db	68	;'D'
   153  000825  4F                 	db	79	;'O'
   154  000826  00                 	db	0
   155  000827                     STR_2:
   156  000827  20                 	db	32
   157  000828  20                 	db	32
   158  000829  20                 	db	32
   159  00082A  20                 	db	32
   160  00082B  20                 	db	32
   161  00082C  20                 	db	32
   162  00082D  00                 	db	0
   163  00082E  00                 	db	0	; dummy byte at the end
   164  0000                     
   165                           ; #config settings
   166                           
   167                           	psect	cinit
   168  000F8C                     __pcinit:
   169                           	callstack 0
   170  000F8C                     start_initialization:
   171                           	callstack 0
   172  000F8C                     __initialization:
   173                           	callstack 0
   174                           
   175                           ; Initialize objects allocated to COMRAM (2 bytes)
   176                           ; load TBLPTR registers with __pidataCOMRAM
   177  000F8C  0E4C               	movlw	low __pidataCOMRAM
   178  000F8E  6EF6               	movwf	tblptrl,c
   179  000F90  0E10               	movlw	high __pidataCOMRAM
   180  000F92  6EF7               	movwf	tblptrh,c
   181  000F94  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   182  000F96  6EF8               	movwf	tblptru,c
   183  000F98  0009               	tblrd		*+	;fetch initializer
   184  000F9A  CFF5 F03B          	movff	tablat,__pdataCOMRAM
   185  000F9E  0009               	tblrd		*+	;fetch initializer
   186  000FA0  CFF5 F03C          	movff	tablat,__pdataCOMRAM+1
   187                           
   188                           ; Clear objects allocated to COMRAM (32 bytes)
   189  000FA4  EE00  F001         	lfsr	0,__pbssCOMRAM
   190  000FA8  0E20               	movlw	32
   191  000FAA                     clear_0:
   192  000FAA  6AEE               	clrf	postinc0,c
   193  000FAC  06E8               	decf	wreg,f,c
   194  000FAE  E1FD               	bnz	clear_0
   195  000FB0                     end_of_initialization:
   196                           	callstack 0
   197  000FB0                     __end_of__initialization:
   198                           	callstack 0
   199  000FB0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   200  000FB2  6EF8               	movwf	tblptru,c
   201  000FB4  0100               	movlb	0
   202  000FB6  EF6B  F006         	goto	_main	;jump to C main() function
   203                           
   204                           	psect	bssCOMRAM
   205  000001                     __pbssCOMRAM:
   206                           	callstack 0
   207  000001                     _texto:
   208                           	callstack 0
   209  000001                     	ds	20
   210  000015                     _estado_teclado:
   211                           	callstack 0
   212  000015                     	ds	1
   213  000016                     _tecla:
   214                           	callstack 0
   215  000016                     	ds	1
   216  000017                     _retardo_cad:
   217                           	callstack 0
   218  000017                     	ds	10
   219                           
   220                           	psect	dataCOMRAM
   221  00003B                     __pdataCOMRAM:
   222                           	callstack 0
   223  00003B                     _retardo:
   224                           	callstack 0
   225  00003B                     	ds	2
   226                           
   227                           	psect	cstackCOMRAM
   228  000021                     __pcstackCOMRAM:
   229                           	callstack 0
   230  000021                     ?_isspace:
   231                           	callstack 0
   232  000021                     ?_isdigit:
   233                           	callstack 0
   234  000021                     ?___wmul:
   235                           	callstack 0
   236  000021                     Lcd_Port@a:
   237                           	callstack 0
   238  000021                     ___wmul@multiplier:
   239                           	callstack 0
   240  000021                     isdigit@c:
   241                           	callstack 0
   242  000021                     isspace@c:
   243                           	callstack 0
   244  000021                     Keypad_Key_Press@keypad_deco:
   245                           	callstack 0
   246                           
   247                           ; 17 bytes @ 0x0
   248  000021                     	ds	1
   249  000022                     ??_Lcd_Cmd:
   250  000022                     Lcd_Write_Char@temp:
   251                           	callstack 0
   252                           
   253                           ; 1 bytes @ 0x1
   254  000022                     	ds	1
   255  000023                     ??_isspace:
   256  000023                     ??_isdigit:
   257  000023                     Lcd_Cmd@a:
   258                           	callstack 0
   259  000023                     Lcd_Write_Char@y:
   260                           	callstack 0
   261  000023                     ___wmul@multiplicand:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x2
   265  000023                     	ds	1
   266  000024                     ??_Lcd_Init:
   267  000024                     Lcd_Set_Cursor@b:
   268                           	callstack 0
   269  000024                     Lcd_Write_Char@a:
   270                           	callstack 0
   271                           
   272                           ; 1 bytes @ 0x3
   273  000024                     	ds	1
   274  000025                     Lcd_Set_Cursor@a:
   275                           	callstack 0
   276  000025                     Lcd_Write_String@a:
   277                           	callstack 0
   278  000025                     ___wmul@product:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0x4
   282  000025                     	ds	1
   283  000026                     Lcd_Set_Cursor@z:
   284                           	callstack 0
   285                           
   286                           ; 1 bytes @ 0x5
   287  000026                     	ds	1
   288  000027                     ??_Lcd_Write_String:
   289  000027                     Lcd_Set_Cursor@y:
   290                           	callstack 0
   291  000027                     _isspace$769:
   292                           	callstack 0
   293                           
   294                           ; 1 bytes @ 0x6
   295  000027                     	ds	1
   296  000028                     ?_atoi:
   297                           	callstack 0
   298  000028                     Lcd_Set_Cursor@temp:
   299                           	callstack 0
   300  000028                     atoi@s:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0x7
   304  000028                     	ds	1
   305  000029                     Lcd_Write_String@i:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0x8
   309  000029                     	ds	1
   310  00002A                     ??_atoi:
   311                           
   312                           ; 1 bytes @ 0x9
   313  00002A                     	ds	1
   314  00002B                     
   315                           ; 1 bytes @ 0xA
   316  00002B                     	ds	3
   317  00002E                     atoi@neg:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0xD
   321  00002E                     	ds	2
   322  000030                     _atoi$751:
   323                           	callstack 0
   324                           
   325                           ; 2 bytes @ 0xF
   326  000030                     	ds	2
   327  000032                     Keypad_Key_Press@tec:
   328                           	callstack 0
   329  000032                     _atoi$753:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x11
   333  000032                     	ds	2
   334  000034                     _atoi$752:
   335                           	callstack 0
   336  000034                     Keypad_Key_Press@fila:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x13
   340  000034                     	ds	1
   341  000035                     atoi@n:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x14
   345  000035                     	ds	2
   346  000037                     ??_teclado_estado:
   347                           
   348                           ; 1 bytes @ 0x16
   349  000037                     	ds	2
   350  000039                     miretardo@valor:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x18
   354  000039                     	ds	2
   355  00003B                     
   356                           ; 1 bytes @ 0x1A
   357 ;;
   358 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   359 ;;
   360 ;; *************** function _main *****************
   361 ;; Defined at:
   362 ;;		line 179 in file "main.c"
   363 ;; Parameters:    Size  Location     Type
   364 ;;		None
   365 ;; Auto vars:     Size  Location     Type
   366 ;;		None
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   376 ;;      Params:         0       0       0       0       0       0       0       0       0
   377 ;;      Locals:         0       0       0       0       0       0       0       0       0
   378 ;;      Temps:          0       0       0       0       0       0       0       0       0
   379 ;;      Totals:         0       0       0       0       0       0       0       0       0
   380 ;;Total ram usage:        0 bytes
   381 ;; Hardware stack levels required when called:    6
   382 ;; This function calls:
   383 ;;		_Keypad_Init
   384 ;;		_Lcd_Clear
   385 ;;		_Lcd_Init
   386 ;;		_Lcd_Set_Cursor
   387 ;;		_Lcd_Write_String
   388 ;;		_SYSTEM_Initialize
   389 ;;		_miretardo
   390 ;; This function is called by:
   391 ;;		Startup code after reset
   392 ;; This function uses a non-reentrant model
   393 ;;
   394                           
   395                           	psect	text0
   396  000CD6                     __ptext0:
   397                           	callstack 0
   398  000CD6                     _main:
   399                           	callstack 25
   400  000CD6                     
   401                           ;main.c: 182:     SYSTEM_Initialize();
   402  000CD6  EC1E  F008         	call	_SYSTEM_Initialize	;wreg free
   403  000CDA                     
   404                           ;main.c: 187:   ANSELA=0;
   405  000CDA  0E00               	movlw	0
   406  000CDC  010F               	movlb	15	; () banked
   407  000CDE  6F5B               	movwf	91,b	;volatile
   408  000CE0                     
   409                           ; BSR set to: 15
   410                           ;main.c: 188:   ANSELB=0;
   411  000CE0  0E00               	movlw	0
   412  000CE2  6F5C               	movwf	92,b	;volatile
   413  000CE4                     
   414                           ; BSR set to: 15
   415                           ;main.c: 189:   ANSELC=0;
   416  000CE4  0E00               	movlw	0
   417  000CE6  6F5D               	movwf	93,b	;volatile
   418  000CE8                     
   419                           ; BSR set to: 15
   420                           ;main.c: 190:   ANSELD=0;
   421  000CE8  0E00               	movlw	0
   422  000CEA  6F5E               	movwf	94,b	;volatile
   423  000CEC                     
   424                           ; BSR set to: 15
   425                           ;main.c: 191:   ANSELE=0;
   426  000CEC  0E00               	movlw	0
   427  000CEE  6F5F               	movwf	95,b	;volatile
   428  000CF0                     
   429                           ; BSR set to: 15
   430                           ;main.c: 193:   Keypad_Init();
   431  000CF0  EC23  F008         	call	_Keypad_Init	;wreg free
   432                           
   433                           ;main.c: 195:   TRISB=0;
   434  000CF4  0E00               	movlw	0
   435  000CF6  6E93               	movwf	147,c	;volatile
   436  000CF8                     
   437                           ;main.c: 197:       Lcd_Init();
   438  000CF8  EC32  F006         	call	_Lcd_Init	;wreg free
   439  000CFC                     
   440                           ;main.c: 198:        Lcd_Clear();
   441  000CFC  EC17  F008         	call	_Lcd_Clear	;wreg free
   442  000D00                     
   443                           ;main.c: 199:         Lcd_Set_Cursor(1,6);
   444  000D00  0E06               	movlw	6
   445  000D02  6E24               	movwf	Lcd_Set_Cursor@b^0,c
   446  000D04  0E01               	movlw	1
   447  000D06  ECA2  F006         	call	_Lcd_Set_Cursor
   448  000D0A                     
   449                           ;main.c: 200:         Lcd_Write_String("TECLADO");
   450  000D0A  0E1F               	movlw	low STR_4
   451  000D0C  6E25               	movwf	Lcd_Write_String@a^0,c
   452  000D0E  0E08               	movlw	high STR_4
   453  000D10  6E26               	movwf	(Lcd_Write_String@a+1)^0,c
   454  000D12  EC03  F007         	call	_Lcd_Write_String	;wreg free
   455  000D16                     
   456                           ;main.c: 203:        TRISC0=0;
   457  000D16  9094               	bcf	3988,0,c	;volatile
   458  000D18                     
   459                           ;main.c: 204:        TRISA0=0;
   460  000D18  9092               	bcf	3986,0,c	;volatile
   461  000D1A                     
   462                           ;main.c: 206:        LATC0=1;
   463  000D1A  808B               	bsf	3979,0,c	;volatile
   464  000D1C                     
   465                           ;main.c: 207:        LATA0=0;
   466  000D1C  9089               	bcf	3977,0,c	;volatile
   467  000D1E                     l1564:
   468                           
   469                           ;main.c: 210:     {;main.c: 222:        LATC0=~LATC0;
   470  000D1E  A08B               	btfss	3979,0,c	;volatile
   471  000D20  EF94  F006         	goto	u631
   472  000D24  EF97  F006         	goto	u630
   473  000D28                     u631:
   474  000D28  808B               	bsf	3979,0,c	;volatile
   475  000D2A  EF98  F006         	goto	u645
   476  000D2E                     u630:
   477  000D2E  908B               	bcf	3979,0,c	;volatile
   478  000D30                     u645:
   479  000D30                     
   480                           ;main.c: 223:        miretardo(retardo);
   481  000D30  C03B  F039         	movff	_retardo,miretardo@valor
   482  000D34  C03C  F03A         	movff	_retardo+1,miretardo@valor+1
   483  000D38  ECAD  F007         	call	_miretardo	;wreg free
   484  000D3C  EF8F  F006         	goto	l1564
   485  000D40  EF00  F000         	goto	start
   486  000D44                     __end_of_main:
   487                           	callstack 0
   488                           
   489 ;; *************** function _miretardo *****************
   490 ;; Defined at:
   491 ;;		line 168 in file "main.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;  valor           2   24[COMRAM] int 
   494 ;; Auto vars:     Size  Location     Type
   495 ;;		None
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   505 ;;      Params:         2       0       0       0       0       0       0       0       0
   506 ;;      Locals:         0       0       0       0       0       0       0       0       0
   507 ;;      Temps:          0       0       0       0       0       0       0       0       0
   508 ;;      Totals:         2       0       0       0       0       0       0       0       0
   509 ;;Total ram usage:        2 bytes
   510 ;; Hardware stack levels used:    1
   511 ;; Hardware stack levels required when called:    5
   512 ;; This function calls:
   513 ;;		_teclado_estado
   514 ;; This function is called by:
   515 ;;		_main
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text1
   520  000F5A                     __ptext1:
   521                           	callstack 0
   522  000F5A                     _miretardo:
   523                           	callstack 25
   524  000F5A                     
   525                           ;main.c: 168: void miretardo(signed int valor);main.c: 169: {;main.c: 171: while (valor>
      +                          0)
   526  000F5A  EFB8  F007         	goto	l1532
   527  000F5E                     l1526:
   528                           
   529                           ;main.c: 172: {;main.c: 173:    _delay((unsigned long)((700)*(4000000/4000000.0)));
   530  000F5E  0EE9               	movlw	233
   531  000F60                     u657:
   532  000F60  2EE8               	decfsz	wreg,f,c
   533  000F62  D7FE               	bra	u657
   534  000F64  F000               	nop	
   535  000F66                     
   536                           ;main.c: 174:      teclado_estado();
   537  000F66  EC18  F004         	call	_teclado_estado	;wreg free
   538  000F6A                     
   539                           ;main.c: 175:      valor--;
   540  000F6A  0639               	decf	miretardo@valor^0,f,c
   541  000F6C  A0D8               	btfss	status,0,c
   542  000F6E  063A               	decf	(miretardo@valor+1)^0,f,c
   543  000F70                     l1532:
   544                           
   545                           ;main.c: 171: while (valor>0)
   546  000F70  BE3A               	btfsc	(miretardo@valor+1)^0,7,c
   547  000F72  EFC5  F007         	goto	u620
   548  000F76  503A               	movf	(miretardo@valor+1)^0,w,c
   549  000F78  E106               	bnz	u621
   550  000F7A  0439               	decf	miretardo@valor^0,w,c
   551  000F7C  B0D8               	btfsc	status,0,c
   552  000F7E  EFC3  F007         	goto	u621
   553  000F82  EFC5  F007         	goto	u620
   554  000F86                     u621:
   555  000F86  EFAF  F007         	goto	l1526
   556  000F8A                     u620:
   557  000F8A  0012               	return		;funcret
   558  000F8C                     __end_of_miretardo:
   559                           	callstack 0
   560                           
   561 ;; *************** function _teclado_estado *****************
   562 ;; Defined at:
   563 ;;		line 73 in file "main.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   577 ;;      Params:         0       0       0       0       0       0       0       0       0
   578 ;;      Locals:         0       0       0       0       0       0       0       0       0
   579 ;;      Temps:          2       0       0       0       0       0       0       0       0
   580 ;;      Totals:         2       0       0       0       0       0       0       0       0
   581 ;;Total ram usage:        2 bytes
   582 ;; Hardware stack levels used:    1
   583 ;; Hardware stack levels required when called:    4
   584 ;; This function calls:
   585 ;;		_Keypad_Key_Press
   586 ;;		_Lcd_Set_Cursor
   587 ;;		_Lcd_Write_Char
   588 ;;		_Lcd_Write_String
   589 ;;		_atoi
   590 ;;		_change_password
   591 ;; This function is called by:
   592 ;;		_miretardo
   593 ;; This function uses a non-reentrant model
   594 ;;
   595                           
   596                           	psect	text2
   597  000830                     __ptext2:
   598                           	callstack 0
   599  000830                     _teclado_estado:
   600                           	callstack 25
   601  000830                     
   602                           ;main.c: 75:     tecla=Keypad_Key_Press();
   603  000830  ECD7  F005         	call	_Keypad_Key_Press	;wreg free
   604  000834  6E16               	movwf	_tecla^0,c
   605                           
   606                           ;main.c: 78:     switch (estado_teclado)
   607  000836  EFF0  F004         	goto	l1518
   608  00083A                     l1430:
   609                           
   610                           ;main.c: 82:           if ((tecla!=0) && (tecla=='+')){
   611  00083A  5016               	movf	_tecla^0,w,c
   612  00083C  B4D8               	btfsc	status,2,c
   613  00083E  EF23  F004         	goto	u521
   614  000842  EF25  F004         	goto	u520
   615  000846                     u521:
   616  000846  EF32  F004         	goto	l1436
   617  00084A                     u520:
   618  00084A  0E2B               	movlw	43
   619  00084C  1816               	xorwf	_tecla^0,w,c
   620  00084E  A4D8               	btfss	status,2,c
   621  000850  EF2C  F004         	goto	u531
   622  000854  EF2E  F004         	goto	u530
   623  000858                     u531:
   624  000858  EF32  F004         	goto	l1436
   625  00085C                     u530:
   626  00085C                     
   627                           ;main.c: 83:                 change_password();
   628  00085C  EC00  F008         	call	_change_password	;wreg free
   629                           
   630                           ;main.c: 84:           }else if (tecla!=0)
   631  000860  EF11  F005         	goto	l181
   632  000864                     l1436:
   633  000864  5016               	movf	_tecla^0,w,c
   634  000866  B4D8               	btfsc	status,2,c
   635  000868  EF38  F004         	goto	u541
   636  00086C  EF3A  F004         	goto	u540
   637  000870                     u541:
   638  000870  EF11  F005         	goto	l181
   639  000874                     u540:
   640  000874                     
   641                           ;main.c: 85:               {;main.c: 86:               LATA0=1;
   642  000874  8089               	bsf	3977,0,c	;volatile
   643                           
   644                           ;main.c: 87:               retardo_cad[0]=tecla;
   645  000876  C016  F017         	movff	_tecla,_retardo_cad
   646  00087A                     
   647                           ;main.c: 88:               estado_teclado=n2;
   648  00087A  0E01               	movlw	1
   649  00087C  6E15               	movwf	_estado_teclado^0,c
   650  00087E                     
   651                           ;main.c: 89:               Lcd_Set_Cursor(2,8);
   652  00087E  0E08               	movlw	8
   653  000880  6E24               	movwf	Lcd_Set_Cursor@b^0,c
   654  000882  0E02               	movlw	2
   655  000884  ECA2  F006         	call	_Lcd_Set_Cursor
   656  000888                     
   657                           ;main.c: 90:               Lcd_Write_Char(tecla);
   658  000888  5016               	movf	_tecla^0,w,c
   659  00088A  EC75  F007         	call	_Lcd_Write_Char
   660  00088E                     l1446:
   661                           
   662                           ;main.c: 91:               _delay((unsigned long)((400)*(4000000/4000.0)));
   663  00088E  0E03               	movlw	3
   664  000890  6E38               	movwf	(??_teclado_estado+1)^0,c
   665  000892  0E08               	movlw	8
   666  000894  6E37               	movwf	??_teclado_estado^0,c
   667  000896  0E77               	movlw	119
   668  000898                     u667:
   669  000898  2EE8               	decfsz	wreg,f,c
   670  00089A  D7FE               	bra	u667
   671  00089C  2E37               	decfsz	??_teclado_estado^0,f,c
   672  00089E  D7FC               	bra	u667
   673  0008A0  2E38               	decfsz	(??_teclado_estado+1)^0,f,c
   674  0008A2  D7FA               	bra	u667
   675  0008A4  F000               	nop	
   676  0008A6  EF11  F005         	goto	l181
   677  0008AA                     l1448:
   678                           
   679                           ;main.c: 97:               if (tecla!=0)
   680  0008AA  5016               	movf	_tecla^0,w,c
   681  0008AC  B4D8               	btfsc	status,2,c
   682  0008AE  EF5B  F004         	goto	u551
   683  0008B2  EF5D  F004         	goto	u550
   684  0008B6                     u551:
   685  0008B6  EF11  F005         	goto	l181
   686  0008BA                     u550:
   687  0008BA                     
   688                           ;main.c: 98:               {;main.c: 99:               retardo_cad[1]=tecla;
   689  0008BA  C016  F018         	movff	_tecla,_retardo_cad+1
   690  0008BE                     
   691                           ;main.c: 100:               estado_teclado=n3;
   692  0008BE  0E02               	movlw	2
   693  0008C0  6E15               	movwf	_estado_teclado^0,c
   694  0008C2                     
   695                           ;main.c: 101:               Lcd_Set_Cursor(2,9);
   696  0008C2  0E09               	movlw	9
   697  0008C4  6E24               	movwf	Lcd_Set_Cursor@b^0,c
   698  0008C6  0E02               	movlw	2
   699  0008C8  ECA2  F006         	call	_Lcd_Set_Cursor
   700  0008CC                     
   701                           ;main.c: 102:               Lcd_Write_Char(tecla);
   702  0008CC  5016               	movf	_tecla^0,w,c
   703  0008CE  EC75  F007         	call	_Lcd_Write_Char
   704  0008D2  EF47  F004         	goto	l1446
   705  0008D6                     l1460:
   706                           
   707                           ;main.c: 110:               if (tecla!=0)
   708  0008D6  5016               	movf	_tecla^0,w,c
   709  0008D8  B4D8               	btfsc	status,2,c
   710  0008DA  EF71  F004         	goto	u561
   711  0008DE  EF73  F004         	goto	u560
   712  0008E2                     u561:
   713  0008E2  EF11  F005         	goto	l181
   714  0008E6                     u560:
   715  0008E6                     
   716                           ;main.c: 111:               {;main.c: 112:               retardo_cad[2]=tecla;
   717  0008E6  C016  F019         	movff	_tecla,_retardo_cad+2
   718  0008EA                     
   719                           ;main.c: 113:               estado_teclado=n4;
   720  0008EA  0E03               	movlw	3
   721  0008EC  6E15               	movwf	_estado_teclado^0,c
   722  0008EE                     
   723                           ;main.c: 114:               Lcd_Set_Cursor(2,10);
   724  0008EE  0E0A               	movlw	10
   725  0008F0  6E24               	movwf	Lcd_Set_Cursor@b^0,c
   726  0008F2  0E02               	movlw	2
   727  0008F4  ECA2  F006         	call	_Lcd_Set_Cursor
   728  0008F8                     
   729                           ;main.c: 115:               Lcd_Write_Char(tecla);
   730  0008F8  5016               	movf	_tecla^0,w,c
   731  0008FA  EC75  F007         	call	_Lcd_Write_Char
   732  0008FE  EF47  F004         	goto	l1446
   733  000902                     l1472:
   734                           
   735                           ;main.c: 122:               if (tecla!=0)
   736  000902  5016               	movf	_tecla^0,w,c
   737  000904  B4D8               	btfsc	status,2,c
   738  000906  EF87  F004         	goto	u571
   739  00090A  EF89  F004         	goto	u570
   740  00090E                     u571:
   741  00090E  EF11  F005         	goto	l181
   742  000912                     u570:
   743  000912                     
   744                           ;main.c: 123:               {;main.c: 124:               retardo_cad[3]=tecla;
   745  000912  C016  F01A         	movff	_tecla,_retardo_cad+3
   746  000916                     
   747                           ;main.c: 125:               estado_teclado=en;
   748  000916  0E04               	movlw	4
   749  000918  6E15               	movwf	_estado_teclado^0,c
   750  00091A                     
   751                           ;main.c: 126:               Lcd_Set_Cursor(2,11);
   752  00091A  0E0B               	movlw	11
   753  00091C  6E24               	movwf	Lcd_Set_Cursor@b^0,c
   754  00091E  0E02               	movlw	2
   755  000920  ECA2  F006         	call	_Lcd_Set_Cursor
   756  000924                     
   757                           ;main.c: 127:               Lcd_Write_Char(tecla);
   758  000924  5016               	movf	_tecla^0,w,c
   759  000926  EC75  F007         	call	_Lcd_Write_Char
   760  00092A  EF47  F004         	goto	l1446
   761  00092E                     l1484:
   762                           
   763                           ;main.c: 135:             if ((tecla!=0) && (tecla!='='))
   764  00092E  5016               	movf	_tecla^0,w,c
   765  000930  B4D8               	btfsc	status,2,c
   766  000932  EF9D  F004         	goto	u581
   767  000936  EF9F  F004         	goto	u580
   768  00093A                     u581:
   769  00093A  EFC3  F004         	goto	l1498
   770  00093E                     u580:
   771  00093E  0E3D               	movlw	61
   772  000940  1816               	xorwf	_tecla^0,w,c
   773  000942  B4D8               	btfsc	status,2,c
   774  000944  EFA6  F004         	goto	u591
   775  000948  EFA8  F004         	goto	u590
   776  00094C                     u591:
   777  00094C  EFC3  F004         	goto	l1498
   778  000950                     u590:
   779  000950                     
   780                           ;main.c: 136:               {;main.c: 137:               LATA0=0;
   781  000950  9089               	bcf	3977,0,c	;volatile
   782  000952                     
   783                           ;main.c: 138:               estado_teclado=n1;
   784  000952  0E00               	movlw	0
   785  000954  6E15               	movwf	_estado_teclado^0,c
   786  000956                     
   787                           ;main.c: 139:              Lcd_Set_Cursor(2,8);
   788  000956  0E08               	movlw	8
   789  000958  6E24               	movwf	Lcd_Set_Cursor@b^0,c
   790  00095A  0E02               	movlw	2
   791  00095C  ECA2  F006         	call	_Lcd_Set_Cursor
   792  000960                     
   793                           ;main.c: 140:                Lcd_Write_String("      ");
   794  000960  0E27               	movlw	low STR_2
   795  000962  6E25               	movwf	Lcd_Write_String@a^0,c
   796  000964  0E08               	movlw	high STR_2
   797  000966  6E26               	movwf	(Lcd_Write_String@a+1)^0,c
   798  000968  EC03  F007         	call	_Lcd_Write_String	;wreg free
   799  00096C                     l1496:
   800                           
   801                           ;main.c: 141:              _delay((unsigned long)((600)*(4000000/4000.0)));
   802  00096C  0E04               	movlw	4
   803  00096E  6E38               	movwf	(??_teclado_estado+1)^0,c
   804  000970  0E0C               	movlw	12
   805  000972  6E37               	movwf	??_teclado_estado^0,c
   806  000974  0E34               	movlw	52
   807  000976                     u677:
   808  000976  2EE8               	decfsz	wreg,f,c
   809  000978  D7FE               	bra	u677
   810  00097A  2E37               	decfsz	??_teclado_estado^0,f,c
   811  00097C  D7FC               	bra	u677
   812  00097E  2E38               	decfsz	(??_teclado_estado+1)^0,f,c
   813  000980  D7FA               	bra	u677
   814                           
   815                           ;main.c: 144:               }
   816  000982  EF11  F005         	goto	l181
   817  000986                     l1498:
   818  000986  5016               	movf	_tecla^0,w,c
   819  000988  B4D8               	btfsc	status,2,c
   820  00098A  EFC9  F004         	goto	u601
   821  00098E  EFCB  F004         	goto	u600
   822  000992                     u601:
   823  000992  EF11  F005         	goto	l181
   824  000996                     u600:
   825  000996  0E3D               	movlw	61
   826  000998  1816               	xorwf	_tecla^0,w,c
   827  00099A  A4D8               	btfss	status,2,c
   828  00099C  EFD2  F004         	goto	u611
   829  0009A0  EFD4  F004         	goto	u610
   830  0009A4                     u611:
   831  0009A4  EF11  F005         	goto	l181
   832  0009A8                     u610:
   833  0009A8                     
   834                           ;main.c: 147:               {;main.c: 148:               LATA0=0;
   835  0009A8  9089               	bcf	3977,0,c	;volatile
   836  0009AA                     
   837                           ;main.c: 149:              retardo_cad[4]=0;
   838  0009AA  0E00               	movlw	0
   839  0009AC  6E1B               	movwf	(_retardo_cad+4)^0,c
   840  0009AE                     
   841                           ;main.c: 150:               retardo=atoi(retardo_cad);
   842  0009AE  0E17               	movlw	low _retardo_cad
   843  0009B0  6E28               	movwf	atoi@s^0,c
   844  0009B2  0E00               	movlw	high _retardo_cad
   845  0009B4  6E29               	movwf	(atoi@s+1)^0,c
   846  0009B6  EC12  F005         	call	_atoi	;wreg free
   847  0009BA  C028  F03B         	movff	?_atoi,_retardo
   848  0009BE  C029  F03C         	movff	?_atoi+1,_retardo+1
   849  0009C2                     
   850                           ;main.c: 151:               estado_teclado=n1;
   851  0009C2  0E00               	movlw	0
   852  0009C4  6E15               	movwf	_estado_teclado^0,c
   853  0009C6                     
   854                           ;main.c: 152:              Lcd_Set_Cursor(2,8);
   855  0009C6  0E08               	movlw	8
   856  0009C8  6E24               	movwf	Lcd_Set_Cursor@b^0,c
   857  0009CA  0E02               	movlw	2
   858  0009CC  ECA2  F006         	call	_Lcd_Set_Cursor
   859  0009D0                     
   860                           ;main.c: 153:              Lcd_Write_String("      ");
   861  0009D0  0E27               	movlw	low STR_2
   862  0009D2  6E25               	movwf	Lcd_Write_String@a^0,c
   863  0009D4  0E08               	movlw	high STR_2
   864  0009D6  6E26               	movwf	(Lcd_Write_String@a+1)^0,c
   865  0009D8  EC03  F007         	call	_Lcd_Write_String	;wreg free
   866  0009DC  EFB6  F004         	goto	l1496
   867  0009E0                     l1518:
   868  0009E0  5015               	movf	_estado_teclado^0,w,c
   869  0009E2  6E37               	movwf	??_teclado_estado^0,c
   870  0009E4  6A38               	clrf	(??_teclado_estado+1)^0,c
   871                           
   872                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   873                           ; Switch size 1, requested type "simple"
   874                           ; Number of cases is 1, Range of values is 0 to 0
   875                           ; switch strategies available:
   876                           ; Name         Instructions Cycles
   877                           ; simple_byte            4     3 (average)
   878                           ;	Chosen strategy is simple_byte
   879  0009E6  5038               	movf	(??_teclado_estado+1)^0,w,c
   880  0009E8  0A00               	xorlw	0	; case 0
   881  0009EA  B4D8               	btfsc	status,2,c
   882  0009EC  EFFA  F004         	goto	l1608
   883  0009F0  EF11  F005         	goto	l181
   884  0009F4                     l1608:
   885                           
   886                           ; Switch size 1, requested type "simple"
   887                           ; Number of cases is 5, Range of values is 0 to 4
   888                           ; switch strategies available:
   889                           ; Name         Instructions Cycles
   890                           ; simple_byte           16     9 (average)
   891                           ;	Chosen strategy is simple_byte
   892  0009F4  5037               	movf	??_teclado_estado^0,w,c
   893  0009F6  0A00               	xorlw	0	; case 0
   894  0009F8  B4D8               	btfsc	status,2,c
   895  0009FA  EF1D  F004         	goto	l1430
   896  0009FE  0A01               	xorlw	1	; case 1
   897  000A00  B4D8               	btfsc	status,2,c
   898  000A02  EF55  F004         	goto	l1448
   899  000A06  0A03               	xorlw	3	; case 2
   900  000A08  B4D8               	btfsc	status,2,c
   901  000A0A  EF6B  F004         	goto	l1460
   902  000A0E  0A01               	xorlw	1	; case 3
   903  000A10  B4D8               	btfsc	status,2,c
   904  000A12  EF81  F004         	goto	l1472
   905  000A16  0A07               	xorlw	7	; case 4
   906  000A18  B4D8               	btfsc	status,2,c
   907  000A1A  EF97  F004         	goto	l1484
   908  000A1E  EF11  F005         	goto	l181
   909  000A22                     l181:
   910  000A22  0012               	return		;funcret
   911  000A24                     __end_of_teclado_estado:
   912                           	callstack 0
   913                           
   914 ;; *************** function _change_password *****************
   915 ;; Defined at:
   916 ;;		line 61 in file "main.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;		None
   919 ;; Auto vars:     Size  Location     Type
   920 ;;		None
   921 ;; Return value:  Size  Location     Type
   922 ;;                  1    wreg      void 
   923 ;; Registers used:
   924 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   930 ;;      Params:         0       0       0       0       0       0       0       0       0
   931 ;;      Locals:         0       0       0       0       0       0       0       0       0
   932 ;;      Temps:          0       0       0       0       0       0       0       0       0
   933 ;;      Totals:         0       0       0       0       0       0       0       0       0
   934 ;;Total ram usage:        0 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; Hardware stack levels required when called:    3
   937 ;; This function calls:
   938 ;;		_Lcd_Clear
   939 ;;		_Lcd_Set_Cursor
   940 ;;		_Lcd_Write_String
   941 ;; This function is called by:
   942 ;;		_teclado_estado
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text3
   947  001000                     __ptext3:
   948                           	callstack 0
   949  001000                     _change_password:
   950                           	callstack 25
   951  001000                     
   952                           ;main.c: 62:     Lcd_Clear();
   953  001000  EC17  F008         	call	_Lcd_Clear	;wreg free
   954  001004                     
   955                           ;main.c: 63:     Lcd_Set_Cursor(1,6);
   956  001004  0E06               	movlw	6
   957  001006  6E24               	movwf	Lcd_Set_Cursor@b^0,c
   958  001008  0E01               	movlw	1
   959  00100A  ECA2  F006         	call	_Lcd_Set_Cursor
   960  00100E                     
   961                           ;main.c: 64:     Lcd_Write_String("CLAVE ACTUAL");
   962  00100E  0E12               	movlw	low STR_1
   963  001010  6E25               	movwf	Lcd_Write_String@a^0,c
   964  001012  0E08               	movlw	high STR_1
   965  001014  6E26               	movwf	(Lcd_Write_String@a+1)^0,c
   966  001016  EC03  F007         	call	_Lcd_Write_String	;wreg free
   967  00101A  0012               	return		;funcret
   968  00101C                     __end_of_change_password:
   969                           	callstack 0
   970                           
   971 ;; *************** function _Lcd_Write_String *****************
   972 ;; Defined at:
   973 ;;		line 97 in file "./lcd.h"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  a               2    4[COMRAM] PTR unsigned char 
   976 ;;		 -> STR_4(8), STR_3(7), STR_2(7), STR_1(13), 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  i               2    8[COMRAM] int 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   988 ;;      Params:         2       0       0       0       0       0       0       0       0
   989 ;;      Locals:         2       0       0       0       0       0       0       0       0
   990 ;;      Temps:          2       0       0       0       0       0       0       0       0
   991 ;;      Totals:         6       0       0       0       0       0       0       0       0
   992 ;;Total ram usage:        6 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    2
   995 ;; This function calls:
   996 ;;		_Lcd_Write_Char
   997 ;; This function is called by:
   998 ;;		_change_password
   999 ;;		_teclado_estado
  1000 ;;		_main
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           	psect	text4
  1005  000E06                     __ptext4:
  1006                           	callstack 0
  1007  000E06                     _Lcd_Write_String:
  1008                           	callstack 25
  1009  000E06                     
  1010                           ;./lcd.h: 97: void Lcd_Write_String(char *a);./lcd.h: 98: {;./lcd.h: 99:  int i;;./lcd.h
      +                          : 100:  for(i=0;a[i]!='\0';i++)
  1011  000E06  0E00               	movlw	0
  1012  000E08  6E2A               	movwf	(Lcd_Write_String@i+1)^0,c
  1013  000E0A  0E00               	movlw	0
  1014  000E0C  6E29               	movwf	Lcd_Write_String@i^0,c
  1015  000E0E  EF19  F007         	goto	l1356
  1016  000E12                     l1352:
  1017                           
  1018                           ;./lcd.h: 101:     Lcd_Write_Char(a[i]);
  1019  000E12  5029               	movf	Lcd_Write_String@i^0,w,c
  1020  000E14  2425               	addwf	Lcd_Write_String@a^0,w,c
  1021  000E16  6E27               	movwf	??_Lcd_Write_String^0,c
  1022  000E18  502A               	movf	(Lcd_Write_String@i+1)^0,w,c
  1023  000E1A  2026               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  1024  000E1C  6E28               	movwf	(??_Lcd_Write_String+1)^0,c
  1025  000E1E  C027  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1026  000E22  C028  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  1027  000E26                     	if	0	;tblptru may be non-zero
  1028  000E26                     	endif
  1029  000E26                     	if	0	;tblptru may be non-zero
  1030  000E26                     	endif
  1031  000E26  0008               	tblrd		*
  1032  000E28  50F5               	movf	tablat,w,c
  1033  000E2A  EC75  F007         	call	_Lcd_Write_Char
  1034  000E2E  4A29               	infsnz	Lcd_Write_String@i^0,f,c
  1035  000E30  2A2A               	incf	(Lcd_Write_String@i+1)^0,f,c
  1036  000E32                     l1356:
  1037  000E32  5029               	movf	Lcd_Write_String@i^0,w,c
  1038  000E34  2425               	addwf	Lcd_Write_String@a^0,w,c
  1039  000E36  6E27               	movwf	??_Lcd_Write_String^0,c
  1040  000E38  502A               	movf	(Lcd_Write_String@i+1)^0,w,c
  1041  000E3A  2026               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  1042  000E3C  6E28               	movwf	(??_Lcd_Write_String+1)^0,c
  1043  000E3E  C027  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1044  000E42  C028  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  1045  000E46                     	if	0	;tblptru may be non-zero
  1046  000E46                     	endif
  1047  000E46                     	if	0	;tblptru may be non-zero
  1048  000E46                     	endif
  1049  000E46  0008               	tblrd		*
  1050  000E48  50F5               	movf	tablat,w,c
  1051  000E4A  0900               	iorlw	0
  1052  000E4C  A4D8               	btfss	status,2,c
  1053  000E4E  EF2B  F007         	goto	u401
  1054  000E52  EF2D  F007         	goto	u400
  1055  000E56                     u401:
  1056  000E56  EF09  F007         	goto	l1352
  1057  000E5A                     u400:
  1058  000E5A  0012               	return		;funcret
  1059  000E5C                     __end_of_Lcd_Write_String:
  1060                           	callstack 0
  1061                           
  1062 ;; *************** function _Lcd_Write_Char *****************
  1063 ;; Defined at:
  1064 ;;		line 81 in file "./lcd.h"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;  a               1    wreg     unsigned char 
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  a               1    3[COMRAM] unsigned char 
  1069 ;;  y               1    2[COMRAM] unsigned char 
  1070 ;;  temp            1    1[COMRAM] unsigned char 
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      void 
  1073 ;; Registers used:
  1074 ;;		wreg, status,2, status,0, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1080 ;;      Params:         0       0       0       0       0       0       0       0       0
  1081 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1082 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1083 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1084 ;;Total ram usage:        3 bytes
  1085 ;; Hardware stack levels used:    1
  1086 ;; Hardware stack levels required when called:    1
  1087 ;; This function calls:
  1088 ;;		_Lcd_Port
  1089 ;; This function is called by:
  1090 ;;		_Lcd_Write_String
  1091 ;;		_teclado_estado
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           	psect	text5
  1096  000EEA                     __ptext5:
  1097                           	callstack 0
  1098  000EEA                     _Lcd_Write_Char:
  1099                           	callstack 25
  1100                           
  1101                           ;incstack = 0
  1102                           ;Lcd_Write_Char@a stored from wreg
  1103  000EEA  6E24               	movwf	Lcd_Write_Char@a^0,c
  1104  000EEC                     
  1105                           ;./lcd.h: 81: void Lcd_Write_Char(char a);./lcd.h: 82: {;./lcd.h: 83:    char temp,y;;./
      +                          lcd.h: 84:    temp = a&0x0F;
  1106  000EEC  5024               	movf	Lcd_Write_Char@a^0,w,c
  1107  000EEE  0B0F               	andlw	15
  1108  000EF0  6E22               	movwf	Lcd_Write_Char@temp^0,c
  1109                           
  1110                           ;./lcd.h: 85:    y = a&0xF0;
  1111  000EF2  5024               	movf	Lcd_Write_Char@a^0,w,c
  1112  000EF4  0BF0               	andlw	240
  1113  000EF6  6E23               	movwf	Lcd_Write_Char@y^0,c
  1114  000EF8                     
  1115                           ;./lcd.h: 86:    PORTBbits.RB7 = 1;
  1116  000EF8  8E81               	bsf	129,7,c	;volatile
  1117  000EFA                     
  1118                           ;./lcd.h: 87:    Lcd_Port(y>>4);
  1119  000EFA  3823               	swapf	Lcd_Write_Char@y^0,w,c
  1120  000EFC  0B0F               	andlw	15
  1121  000EFE  ECD5  F006         	call	_Lcd_Port
  1122  000F02                     
  1123                           ;./lcd.h: 88:    PORTBbits.RB6 = 1;
  1124  000F02  8C81               	bsf	129,6,c	;volatile
  1125  000F04                     
  1126                           ;./lcd.h: 89:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1127  000F04  0E0D               	movlw	13
  1128  000F06                     u687:
  1129  000F06  2EE8               	decfsz	wreg,f,c
  1130  000F08  D7FE               	bra	u687
  1131  000F0A  F000               	nop	
  1132  000F0C                     
  1133                           ;./lcd.h: 90:    PORTBbits.RB6 = 0;
  1134  000F0C  9C81               	bcf	129,6,c	;volatile
  1135  000F0E                     
  1136                           ;./lcd.h: 91:    Lcd_Port(temp);
  1137  000F0E  5022               	movf	Lcd_Write_Char@temp^0,w,c
  1138  000F10  ECD5  F006         	call	_Lcd_Port
  1139  000F14                     
  1140                           ;./lcd.h: 92:    PORTBbits.RB6 = 1;
  1141  000F14  8C81               	bsf	129,6,c	;volatile
  1142  000F16                     
  1143                           ;./lcd.h: 93:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1144  000F16  0E0D               	movlw	13
  1145  000F18                     u697:
  1146  000F18  2EE8               	decfsz	wreg,f,c
  1147  000F1A  D7FE               	bra	u697
  1148  000F1C  F000               	nop	
  1149  000F1E                     
  1150                           ;./lcd.h: 94:    PORTBbits.RB6 = 0;
  1151  000F1E  9C81               	bcf	129,6,c	;volatile
  1152  000F20  0012               	return		;funcret
  1153  000F22                     __end_of_Lcd_Write_Char:
  1154                           	callstack 0
  1155                           
  1156 ;; *************** function _Lcd_Set_Cursor *****************
  1157 ;; Defined at:
  1158 ;;		line 41 in file "./lcd.h"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  a               1    wreg     unsigned char 
  1161 ;;  b               1    3[COMRAM] unsigned char 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  a               1    4[COMRAM] unsigned char 
  1164 ;;  temp            1    7[COMRAM] unsigned char 
  1165 ;;  y               1    6[COMRAM] unsigned char 
  1166 ;;  z               1    5[COMRAM] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1176 ;;      Params:         1       0       0       0       0       0       0       0       0
  1177 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1179 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1180 ;;Total ram usage:        5 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    2
  1183 ;; This function calls:
  1184 ;;		_Lcd_Cmd
  1185 ;; This function is called by:
  1186 ;;		_change_password
  1187 ;;		_teclado_estado
  1188 ;;		_main
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text6
  1193  000D44                     __ptext6:
  1194                           	callstack 0
  1195  000D44                     _Lcd_Set_Cursor:
  1196                           	callstack 25
  1197                           
  1198                           ;incstack = 0
  1199                           ;Lcd_Set_Cursor@a stored from wreg
  1200  000D44  6E25               	movwf	Lcd_Set_Cursor@a^0,c
  1201  000D46                     
  1202                           ;./lcd.h: 41: void Lcd_Set_Cursor(char a, char b);./lcd.h: 42: {;./lcd.h: 43:  char temp
      +                          ,z,y;;./lcd.h: 44:  if(a == 1)
  1203  000D46  0425               	decf	Lcd_Set_Cursor@a^0,w,c
  1204  000D48  A4D8               	btfss	status,2,c
  1205  000D4A  EFA9  F006         	goto	u381
  1206  000D4E  EFAB  F006         	goto	u380
  1207  000D52                     u381:
  1208  000D52  EFBC  F006         	goto	l1342
  1209  000D56                     u380:
  1210  000D56                     
  1211                           ;./lcd.h: 45:  {;./lcd.h: 46:    temp = 0x80 + b - 1;
  1212  000D56  5024               	movf	Lcd_Set_Cursor@b^0,w,c
  1213  000D58  0F7F               	addlw	127
  1214  000D5A  6E28               	movwf	Lcd_Set_Cursor@temp^0,c
  1215                           
  1216                           ;./lcd.h: 47:   z = temp>>4;
  1217  000D5C  3828               	swapf	Lcd_Set_Cursor@temp^0,w,c
  1218  000D5E  0B0F               	andlw	15
  1219  000D60  6E26               	movwf	Lcd_Set_Cursor@z^0,c
  1220                           
  1221                           ;./lcd.h: 48:   y = temp & 0x0F;
  1222  000D62  5028               	movf	Lcd_Set_Cursor@temp^0,w,c
  1223  000D64  0B0F               	andlw	15
  1224  000D66  6E27               	movwf	Lcd_Set_Cursor@y^0,c
  1225  000D68                     
  1226                           ;./lcd.h: 49:   Lcd_Cmd(z);
  1227  000D68  5026               	movf	Lcd_Set_Cursor@z^0,w,c
  1228  000D6A  ECF0  F007         	call	_Lcd_Cmd
  1229  000D6E                     
  1230                           ;./lcd.h: 50:   Lcd_Cmd(y);
  1231  000D6E  5027               	movf	Lcd_Set_Cursor@y^0,w,c
  1232  000D70  ECF0  F007         	call	_Lcd_Cmd
  1233                           
  1234                           ;./lcd.h: 51:  }
  1235  000D74  EFD4  F006         	goto	l117
  1236  000D78                     l1342:
  1237  000D78  0E02               	movlw	2
  1238  000D7A  1825               	xorwf	Lcd_Set_Cursor@a^0,w,c
  1239  000D7C  A4D8               	btfss	status,2,c
  1240  000D7E  EFC3  F006         	goto	u391
  1241  000D82  EFC5  F006         	goto	u390
  1242  000D86                     u391:
  1243  000D86  EFD4  F006         	goto	l117
  1244  000D8A                     u390:
  1245  000D8A                     
  1246                           ;./lcd.h: 53:  {;./lcd.h: 54:   temp = 0xC0 + b - 1;
  1247  000D8A  5024               	movf	Lcd_Set_Cursor@b^0,w,c
  1248  000D8C  0FBF               	addlw	191
  1249  000D8E  6E28               	movwf	Lcd_Set_Cursor@temp^0,c
  1250                           
  1251                           ;./lcd.h: 55:   z = temp>>4;
  1252  000D90  3828               	swapf	Lcd_Set_Cursor@temp^0,w,c
  1253  000D92  0B0F               	andlw	15
  1254  000D94  6E26               	movwf	Lcd_Set_Cursor@z^0,c
  1255                           
  1256                           ;./lcd.h: 56:   y = temp & 0x0F;
  1257  000D96  5028               	movf	Lcd_Set_Cursor@temp^0,w,c
  1258  000D98  0B0F               	andlw	15
  1259  000D9A  6E27               	movwf	Lcd_Set_Cursor@y^0,c
  1260  000D9C                     
  1261                           ;./lcd.h: 57:   Lcd_Cmd(z);
  1262  000D9C  5026               	movf	Lcd_Set_Cursor@z^0,w,c
  1263  000D9E  ECF0  F007         	call	_Lcd_Cmd
  1264  000DA2                     
  1265                           ;./lcd.h: 58:   Lcd_Cmd(y);
  1266  000DA2  5027               	movf	Lcd_Set_Cursor@y^0,w,c
  1267  000DA4  ECF0  F007         	call	_Lcd_Cmd
  1268  000DA8                     l117:
  1269  000DA8  0012               	return		;funcret
  1270  000DAA                     __end_of_Lcd_Set_Cursor:
  1271                           	callstack 0
  1272                           
  1273 ;; *************** function _Lcd_Clear *****************
  1274 ;; Defined at:
  1275 ;;		line 35 in file "./lcd.h"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;		None
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  2  110[None  ] int 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1289 ;;      Params:         0       0       0       0       0       0       0       0       0
  1290 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1291 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1292 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1293 ;;Total ram usage:        0 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    2
  1296 ;; This function calls:
  1297 ;;		_Lcd_Cmd
  1298 ;; This function is called by:
  1299 ;;		_change_password
  1300 ;;		_main
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text7
  1305  00102E                     __ptext7:
  1306                           	callstack 0
  1307  00102E                     _Lcd_Clear:
  1308                           	callstack 25
  1309  00102E                     
  1310                           ;./lcd.h: 37:  Lcd_Cmd(0);
  1311  00102E  0E00               	movlw	0
  1312  001030  ECF0  F007         	call	_Lcd_Cmd
  1313                           
  1314                           ;./lcd.h: 38:  Lcd_Cmd(1);
  1315  001034  0E01               	movlw	1
  1316  001036  ECF0  F007         	call	_Lcd_Cmd
  1317  00103A  0012               	return		;funcret
  1318  00103C                     __end_of_Lcd_Clear:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _atoi *****************
  1322 ;; Defined at:
  1323 ;;		line 4 in file "/Applications/microchip/xc8/v2.31/pic/sources/c99/common/atoi.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  s               2    7[COMRAM] PTR const unsigned char 
  1326 ;;		 -> retardo_cad(10), 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  n               2   20[COMRAM] int 
  1329 ;;  neg             2   13[COMRAM] int 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  2    7[COMRAM] int 
  1332 ;; Registers used:
  1333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1339 ;;      Params:         2       0       0       0       0       0       0       0       0
  1340 ;;      Locals:         9       0       0       0       0       0       0       0       0
  1341 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1342 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1343 ;;Total ram usage:       15 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    1
  1346 ;; This function calls:
  1347 ;;		___wmul
  1348 ;;		_isdigit
  1349 ;;		_isspace
  1350 ;; This function is called by:
  1351 ;;		_teclado_estado
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text8
  1356  000A24                     __ptext8:
  1357                           	callstack 0
  1358  000A24                     _atoi:
  1359                           	callstack 27
  1360  000A24  0E00               	movlw	0
  1361  000A26  6E36               	movwf	(atoi@n+1)^0,c
  1362  000A28  0E00               	movlw	0
  1363  000A2A  6E35               	movwf	atoi@n^0,c
  1364  000A2C  0E00               	movlw	0
  1365  000A2E  6E2F               	movwf	(atoi@neg+1)^0,c
  1366  000A30  0E00               	movlw	0
  1367  000A32  6E2E               	movwf	atoi@neg^0,c
  1368  000A34  EF1E  F005         	goto	l1390
  1369  000A38                     l1388:
  1370  000A38  4A28               	infsnz	atoi@s^0,f,c
  1371  000A3A  2A29               	incf	(atoi@s+1)^0,f,c
  1372  000A3C                     l1390:
  1373  000A3C  0E01               	movlw	1
  1374  000A3E  6E34               	movwf	_atoi$752^0,c
  1375  000A40  C028  FFD9         	movff	atoi@s,fsr2l
  1376  000A44  C029  FFDA         	movff	atoi@s+1,fsr2h
  1377  000A48  0E20               	movlw	32
  1378  000A4A  18DE               	xorwf	postinc2,w,c
  1379  000A4C  B4D8               	btfsc	status,2,c
  1380  000A4E  EF2B  F005         	goto	u451
  1381  000A52  EF2D  F005         	goto	u450
  1382  000A56                     u451:
  1383  000A56  EF49  F005         	goto	l1398
  1384  000A5A                     u450:
  1385  000A5A  0EF7               	movlw	247
  1386  000A5C  6E2A               	movwf	??_atoi^0,c
  1387  000A5E  0EFF               	movlw	255
  1388  000A60  6E2B               	movwf	(??_atoi+1)^0,c
  1389  000A62  C028  FFD9         	movff	atoi@s,fsr2l
  1390  000A66  C029  FFDA         	movff	atoi@s+1,fsr2h
  1391  000A6A  50DF               	movf	indf2,w,c
  1392  000A6C  6E2C               	movwf	(??_atoi+2)^0,c
  1393  000A6E  6A2D               	clrf	(??_atoi+3)^0,c
  1394  000A70  502A               	movf	??_atoi^0,w,c
  1395  000A72  262C               	addwf	(??_atoi+2)^0,f,c
  1396  000A74  502B               	movf	(??_atoi+1)^0,w,c
  1397  000A76  222D               	addwfc	(??_atoi+3)^0,f,c
  1398  000A78  502D               	movf	(??_atoi+3)^0,w,c
  1399  000A7A  E109               	bnz	u460
  1400  000A7C  0E05               	movlw	5
  1401  000A7E  5C2C               	subwf	(??_atoi+2)^0,w,c
  1402  000A80  A0D8               	btfss	status,0,c
  1403  000A82  EF45  F005         	goto	u461
  1404  000A86  EF47  F005         	goto	u460
  1405  000A8A                     u461:
  1406  000A8A  EF49  F005         	goto	l1398
  1407  000A8E                     u460:
  1408  000A8E  0E00               	movlw	0
  1409  000A90  6E34               	movwf	_atoi$752^0,c
  1410  000A92                     l1398:
  1411  000A92  C034  F030         	movff	_atoi$752,_atoi$751
  1412  000A96  6A31               	clrf	(_atoi$751+1)^0,c
  1413  000A98  5030               	movf	_atoi$751^0,w,c
  1414  000A9A  1031               	iorwf	(_atoi$751+1)^0,w,c
  1415  000A9C  A4D8               	btfss	status,2,c
  1416  000A9E  EF53  F005         	goto	u471
  1417  000AA2  EF55  F005         	goto	u470
  1418  000AA6                     u471:
  1419  000AA6  EF1C  F005         	goto	l1388
  1420  000AAA                     u470:
  1421  000AAA  EF5F  F005         	goto	l1408
  1422  000AAE                     l1404:
  1423  000AAE  0E00               	movlw	0
  1424  000AB0  6E2F               	movwf	(atoi@neg+1)^0,c
  1425  000AB2  0E01               	movlw	1
  1426  000AB4  6E2E               	movwf	atoi@neg^0,c
  1427  000AB6                     l1406:
  1428  000AB6  4A28               	infsnz	atoi@s^0,f,c
  1429  000AB8  2A29               	incf	(atoi@s+1)^0,f,c
  1430  000ABA  EF94  F005         	goto	l1414
  1431  000ABE                     l1408:
  1432  000ABE  C028  FFD9         	movff	atoi@s,fsr2l
  1433  000AC2  C029  FFDA         	movff	atoi@s+1,fsr2h
  1434  000AC6  50DF               	movf	indf2,w,c
  1435  000AC8  6E2A               	movwf	??_atoi^0,c
  1436  000ACA  6A2B               	clrf	(??_atoi+1)^0,c
  1437                           
  1438                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1439                           ; Switch size 1, requested type "simple"
  1440                           ; Number of cases is 1, Range of values is 0 to 0
  1441                           ; switch strategies available:
  1442                           ; Name         Instructions Cycles
  1443                           ; simple_byte            4     3 (average)
  1444                           ;	Chosen strategy is simple_byte
  1445  000ACC  502B               	movf	(??_atoi+1)^0,w,c
  1446  000ACE  0A00               	xorlw	0	; case 0
  1447  000AD0  B4D8               	btfsc	status,2,c
  1448  000AD2  EF6D  F005         	goto	l1610
  1449  000AD6  EF94  F005         	goto	l1414
  1450  000ADA                     l1610:
  1451                           
  1452                           ; Switch size 1, requested type "simple"
  1453                           ; Number of cases is 2, Range of values is 43 to 45
  1454                           ; switch strategies available:
  1455                           ; Name         Instructions Cycles
  1456                           ; simple_byte            7     4 (average)
  1457                           ;	Chosen strategy is simple_byte
  1458  000ADA  502A               	movf	??_atoi^0,w,c
  1459  000ADC  0A2B               	xorlw	43	; case 43
  1460  000ADE  B4D8               	btfsc	status,2,c
  1461  000AE0  EF5B  F005         	goto	l1406
  1462  000AE4  0A06               	xorlw	6	; case 45
  1463  000AE6  B4D8               	btfsc	status,2,c
  1464  000AE8  EF57  F005         	goto	l1404
  1465  000AEC  EF94  F005         	goto	l1414
  1466  000AF0                     l1410:
  1467  000AF0  C035  F021         	movff	atoi@n,___wmul@multiplier
  1468  000AF4  C036  F022         	movff	atoi@n+1,___wmul@multiplier+1
  1469  000AF8  0E00               	movlw	0
  1470  000AFA  6E24               	movwf	(___wmul@multiplicand+1)^0,c
  1471  000AFC  0E0A               	movlw	10
  1472  000AFE  6E23               	movwf	___wmul@multiplicand^0,c
  1473  000B00  ECDD  F007         	call	___wmul	;wreg free
  1474  000B04  C028  FFD9         	movff	atoi@s,fsr2l
  1475  000B08  C029  FFDA         	movff	atoi@s+1,fsr2h
  1476  000B0C  50DF               	movf	indf2,w,c
  1477  000B0E  6E2A               	movwf	??_atoi^0,c
  1478  000B10  502A               	movf	??_atoi^0,w,c
  1479  000B12  5E21               	subwf	?___wmul^0,f,c
  1480  000B14  0E00               	movlw	0
  1481  000B16  5A22               	subwfb	(?___wmul+1)^0,f,c
  1482  000B18  0E30               	movlw	48
  1483  000B1A  2421               	addwf	?___wmul^0,w,c
  1484  000B1C  6E35               	movwf	atoi@n^0,c
  1485  000B1E  0E00               	movlw	0
  1486  000B20  2022               	addwfc	(?___wmul+1)^0,w,c
  1487  000B22  6E36               	movwf	(atoi@n+1)^0,c
  1488  000B24  EF5B  F005         	goto	l1406
  1489  000B28                     l1414:
  1490  000B28  0ED0               	movlw	208
  1491  000B2A  6E2A               	movwf	??_atoi^0,c
  1492  000B2C  0EFF               	movlw	255
  1493  000B2E  6E2B               	movwf	(??_atoi+1)^0,c
  1494  000B30  C028  FFD9         	movff	atoi@s,fsr2l
  1495  000B34  C029  FFDA         	movff	atoi@s+1,fsr2h
  1496  000B38  50DF               	movf	indf2,w,c
  1497  000B3A  6E2C               	movwf	(??_atoi+2)^0,c
  1498  000B3C  6A2D               	clrf	(??_atoi+3)^0,c
  1499  000B3E  502A               	movf	??_atoi^0,w,c
  1500  000B40  262C               	addwf	(??_atoi+2)^0,f,c
  1501  000B42  502B               	movf	(??_atoi+1)^0,w,c
  1502  000B44  222D               	addwfc	(??_atoi+3)^0,f,c
  1503  000B46  502D               	movf	(??_atoi+3)^0,w,c
  1504  000B48  E10A               	bnz	u480
  1505  000B4A  0E0A               	movlw	10
  1506  000B4C  5C2C               	subwf	(??_atoi+2)^0,w,c
  1507  000B4E  A0D8               	btfss	status,0,c
  1508  000B50  EFAC  F005         	goto	u481
  1509  000B54  EFAF  F005         	goto	u480
  1510  000B58                     u481:
  1511  000B58  0E01               	movlw	1
  1512  000B5A  EFB0  F005         	goto	u490
  1513  000B5E                     u480:
  1514  000B5E  0E00               	movlw	0
  1515  000B60                     u490:
  1516  000B60  6E32               	movwf	_atoi$753^0,c
  1517  000B62  6A33               	clrf	(_atoi$753+1)^0,c
  1518  000B64  5032               	movf	_atoi$753^0,w,c
  1519  000B66  1033               	iorwf	(_atoi$753+1)^0,w,c
  1520  000B68  A4D8               	btfss	status,2,c
  1521  000B6A  EFB9  F005         	goto	u501
  1522  000B6E  EFBB  F005         	goto	u500
  1523  000B72                     u501:
  1524  000B72  EF78  F005         	goto	l1410
  1525  000B76                     u500:
  1526  000B76  502E               	movf	atoi@neg^0,w,c
  1527  000B78  102F               	iorwf	(atoi@neg+1)^0,w,c
  1528  000B7A  A4D8               	btfss	status,2,c
  1529  000B7C  EFC2  F005         	goto	u511
  1530  000B80  EFC4  F005         	goto	u510
  1531  000B84                     u511:
  1532  000B84  EFD2  F005         	goto	l897
  1533  000B88                     u510:
  1534  000B88  C035  F02A         	movff	atoi@n,??_atoi
  1535  000B8C  C036  F02B         	movff	atoi@n+1,??_atoi+1
  1536  000B90  1E2A               	comf	??_atoi^0,f,c
  1537  000B92  1E2B               	comf	(??_atoi+1)^0,f,c
  1538  000B94  4A2A               	infsnz	??_atoi^0,f,c
  1539  000B96  2A2B               	incf	(??_atoi+1)^0,f,c
  1540  000B98  C02A  F028         	movff	??_atoi,?_atoi
  1541  000B9C  C02B  F029         	movff	??_atoi+1,?_atoi+1
  1542  000BA0  EFD6  F005         	goto	l900
  1543  000BA4                     l897:
  1544  000BA4  C035  F028         	movff	atoi@n,?_atoi
  1545  000BA8  C036  F029         	movff	atoi@n+1,?_atoi+1
  1546  000BAC                     l900:
  1547  000BAC  0012               	return		;funcret
  1548  000BAE                     __end_of_atoi:
  1549                           	callstack 0
  1550                           
  1551 ;; *************** function _isspace *****************
  1552 ;; Defined at:
  1553 ;;		line 5 in file "/Applications/microchip/xc8/v2.31/pic/sources/c99/common/isspace.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;  c               2    0[COMRAM] int 
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;		None
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  2    0[COMRAM] int 
  1560 ;; Registers used:
  1561 ;;		wreg, status,2, status,0
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1567 ;;      Params:         2       0       0       0       0       0       0       0       0
  1568 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1569 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1570 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1571 ;;Total ram usage:        7 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_atoi
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text9
  1581  000E5C                     __ptext9:
  1582                           	callstack 0
  1583  000E5C                     _isspace:
  1584                           	callstack 27
  1585  000E5C  0E01               	movlw	1
  1586  000E5E  6E27               	movwf	_isspace$769^0,c
  1587  000E60  0E20               	movlw	32
  1588  000E62  1821               	xorwf	isspace@c^0,w,c
  1589  000E64  1022               	iorwf	(isspace@c+1)^0,w,c
  1590  000E66  B4D8               	btfsc	status,2,c
  1591  000E68  EF38  F007         	goto	u411
  1592  000E6C  EF3A  F007         	goto	u410
  1593  000E70                     u411:
  1594  000E70  EF53  F007         	goto	l1372
  1595  000E74                     u410:
  1596  000E74  0EF7               	movlw	247
  1597  000E76  6E23               	movwf	??_isspace^0,c
  1598  000E78  0EFF               	movlw	255
  1599  000E7A  6E24               	movwf	(??_isspace+1)^0,c
  1600  000E7C  C021  F025         	movff	isspace@c,??_isspace+2
  1601  000E80  C022  F026         	movff	isspace@c+1,??_isspace+3
  1602  000E84  5023               	movf	??_isspace^0,w,c
  1603  000E86  2625               	addwf	(??_isspace+2)^0,f,c
  1604  000E88  5024               	movf	(??_isspace+1)^0,w,c
  1605  000E8A  2226               	addwfc	(??_isspace+3)^0,f,c
  1606  000E8C  5026               	movf	(??_isspace+3)^0,w,c
  1607  000E8E  E109               	bnz	u420
  1608  000E90  0E05               	movlw	5
  1609  000E92  5C25               	subwf	(??_isspace+2)^0,w,c
  1610  000E94  A0D8               	btfss	status,0,c
  1611  000E96  EF4F  F007         	goto	u421
  1612  000E9A  EF51  F007         	goto	u420
  1613  000E9E                     u421:
  1614  000E9E  EF53  F007         	goto	l1372
  1615  000EA2                     u420:
  1616  000EA2  0E00               	movlw	0
  1617  000EA4  6E27               	movwf	_isspace$769^0,c
  1618  000EA6                     l1372:
  1619  000EA6  C027  F021         	movff	_isspace$769,?_isspace
  1620  000EAA  6A22               	clrf	(?_isspace+1)^0,c
  1621  000EAC  0012               	return		;funcret
  1622  000EAE                     __end_of_isspace:
  1623                           	callstack 0
  1624                           
  1625 ;; *************** function _isdigit *****************
  1626 ;; Defined at:
  1627 ;;		line 5 in file "/Applications/microchip/xc8/v2.31/pic/sources/c99/common/isdigit.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  c               2    0[COMRAM] int 
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;		None
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  2    0[COMRAM] int 
  1634 ;; Registers used:
  1635 ;;		wreg, status,2, status,0
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1641 ;;      Params:         2       0       0       0       0       0       0       0       0
  1642 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1643 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1644 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1645 ;;Total ram usage:        6 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; This function calls:
  1648 ;;		Nothing
  1649 ;; This function is called by:
  1650 ;;		_atoi
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text10
  1655  000F22                     __ptext10:
  1656                           	callstack 0
  1657  000F22                     _isdigit:
  1658                           	callstack 27
  1659  000F22  0ED0               	movlw	208
  1660  000F24  6E23               	movwf	??_isdigit^0,c
  1661  000F26  0EFF               	movlw	255
  1662  000F28  6E24               	movwf	(??_isdigit+1)^0,c
  1663  000F2A  C021  F025         	movff	isdigit@c,??_isdigit+2
  1664  000F2E  C022  F026         	movff	isdigit@c+1,??_isdigit+3
  1665  000F32  5023               	movf	??_isdigit^0,w,c
  1666  000F34  2625               	addwf	(??_isdigit+2)^0,f,c
  1667  000F36  5024               	movf	(??_isdigit+1)^0,w,c
  1668  000F38  2226               	addwfc	(??_isdigit+3)^0,f,c
  1669  000F3A  5026               	movf	(??_isdigit+3)^0,w,c
  1670  000F3C  E10A               	bnz	u430
  1671  000F3E  0E0A               	movlw	10
  1672  000F40  5C25               	subwf	(??_isdigit+2)^0,w,c
  1673  000F42  A0D8               	btfss	status,0,c
  1674  000F44  EFA6  F007         	goto	u431
  1675  000F48  EFA9  F007         	goto	u430
  1676  000F4C                     u431:
  1677  000F4C  0E01               	movlw	1
  1678  000F4E  EFAA  F007         	goto	u440
  1679  000F52                     u430:
  1680  000F52  0E00               	movlw	0
  1681  000F54                     u440:
  1682  000F54  6E21               	movwf	?_isdigit^0,c
  1683  000F56  6A22               	clrf	(?_isdigit+1)^0,c
  1684  000F58  0012               	return		;funcret
  1685  000F5A                     __end_of_isdigit:
  1686                           	callstack 0
  1687                           
  1688 ;; *************** function ___wmul *****************
  1689 ;; Defined at:
  1690 ;;		line 15 in file "/Applications/microchip/xc8/v2.31/pic/sources/c99/common/Umul16.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  multiplier      2    0[COMRAM] unsigned int 
  1693 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  product         2    4[COMRAM] unsigned int 
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  2    0[COMRAM] unsigned int 
  1698 ;; Registers used:
  1699 ;;		wreg, status,2, status,0, prodl, prodh
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1705 ;;      Params:         4       0       0       0       0       0       0       0       0
  1706 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1708 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1709 ;;Total ram usage:        6 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; This function calls:
  1712 ;;		Nothing
  1713 ;; This function is called by:
  1714 ;;		_atoi
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text11
  1719  000FBA                     __ptext11:
  1720                           	callstack 0
  1721  000FBA                     ___wmul:
  1722                           	callstack 27
  1723  000FBA  5021               	movf	___wmul@multiplier^0,w,c
  1724  000FBC  0223               	mulwf	___wmul@multiplicand^0,c
  1725  000FBE  CFF3 F025          	movff	prodl,___wmul@product
  1726  000FC2  CFF4 F026          	movff	prodh,___wmul@product+1
  1727  000FC6  5021               	movf	___wmul@multiplier^0,w,c
  1728  000FC8  0224               	mulwf	(___wmul@multiplicand+1)^0,c
  1729  000FCA  50F3               	movf	243,w,c
  1730  000FCC  2626               	addwf	(___wmul@product+1)^0,f,c
  1731  000FCE  5022               	movf	(___wmul@multiplier+1)^0,w,c
  1732  000FD0  0223               	mulwf	___wmul@multiplicand^0,c
  1733  000FD2  50F3               	movf	243,w,c
  1734  000FD4  2626               	addwf	(___wmul@product+1)^0,f,c
  1735  000FD6  C025  F021         	movff	___wmul@product,?___wmul
  1736  000FDA  C026  F022         	movff	___wmul@product+1,?___wmul+1
  1737  000FDE  0012               	return		;funcret
  1738  000FE0                     __end_of___wmul:
  1739                           	callstack 0
  1740                           
  1741 ;; *************** function _Keypad_Key_Press *****************
  1742 ;; Defined at:
  1743 ;;		line 39 in file "main.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  keypad_deco    17    0[COMRAM] const unsigned char [17]
  1748 ;;  fila            2   19[COMRAM] unsigned int 
  1749 ;;  tec             2   17[COMRAM] unsigned int 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      unsigned char 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1759 ;;      Params:         0       0       0       0       0       0       0       0       0
  1760 ;;      Locals:        21       0       0       0       0       0       0       0       0
  1761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1762 ;;      Totals:        21       0       0       0       0       0       0       0       0
  1763 ;;Total ram usage:       21 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; This function calls:
  1766 ;;		Nothing
  1767 ;; This function is called by:
  1768 ;;		_teclado_estado
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text12
  1773  000BAE                     __ptext12:
  1774                           	callstack 0
  1775  000BAE                     _Keypad_Key_Press:
  1776                           	callstack 28
  1777  000BAE                     
  1778                           ;main.c: 41:  const unsigned char keypad_deco[17]=
  1779  000BAE  0E01               	movlw	low Keypad_Key_Press@F4959
  1780  000BB0  6EF6               	movwf	tblptrl,c
  1781  000BB2                     	if	1	;There is more than 1 active tblptr byte
  1782  000BB2  0E08               	movlw	high Keypad_Key_Press@F4959
  1783  000BB4  6EF7               	movwf	tblptrh,c
  1784  000BB6                     	endif
  1785  000BB6                     	if	0	;There are less than 3 active tblptr bytes
  1786  000BB6                     	endif
  1787  000BB6  EE20  F021         	lfsr	2,Keypad_Key_Press@keypad_deco
  1788  000BBA  0E10               	movlw	16
  1789  000BBC                     u120:
  1790  000BBC  0009               	tblrd		*+
  1791  000BBE  CFF5 FFDE          	movff	tablat,postinc2
  1792  000BC2  06E8               	decf	wreg,f,c
  1793  000BC4  E2FB               	bc	u120
  1794  000BC6                     
  1795                           ;main.c: 44:     unsigned int tec = 0, fila;
  1796  000BC6  0E00               	movlw	0
  1797  000BC8  6E33               	movwf	(Keypad_Key_Press@tec+1)^0,c
  1798  000BCA  0E00               	movlw	0
  1799  000BCC  6E32               	movwf	Keypad_Key_Press@tec^0,c
  1800  000BCE                     
  1801                           ;main.c: 47:     for (fila = 0b00000001; fila < 0b00010000; fila <<= 1)
  1802  000BCE  0E00               	movlw	0
  1803  000BD0  6E35               	movwf	(Keypad_Key_Press@fila+1)^0,c
  1804  000BD2  0E01               	movlw	1
  1805  000BD4  6E34               	movwf	Keypad_Key_Press@fila^0,c
  1806  000BD6                     l1020:
  1807                           
  1808                           ;main.c: 48:     {;main.c: 49:         LATD =fila<<4;
  1809  000BD6  3834               	swapf	Keypad_Key_Press@fila^0,w,c
  1810  000BD8  0BF0               	andlw	240
  1811  000BDA  6E8C               	movwf	140,c	;volatile
  1812  000BDC                     
  1813                           ;main.c: 50:         if (PORTDbits.RD0== 1) break; tec++;
  1814  000BDC  A083               	btfss	131,0,c	;volatile
  1815  000BDE  EFF3  F005         	goto	u131
  1816  000BE2  EFF5  F005         	goto	u130
  1817  000BE6                     u131:
  1818  000BE6  EFF7  F005         	goto	l1026
  1819  000BEA                     u130:
  1820  000BEA  EF28  F006         	goto	l1048
  1821  000BEE                     l1026:
  1822  000BEE  4A32               	infsnz	Keypad_Key_Press@tec^0,f,c
  1823  000BF0  2A33               	incf	(Keypad_Key_Press@tec+1)^0,f,c
  1824  000BF2                     
  1825                           ;main.c: 51:         if (PORTDbits.RD1 == 1) break; tec++;
  1826  000BF2  A283               	btfss	131,1,c	;volatile
  1827  000BF4  EFFE  F005         	goto	u141
  1828  000BF8  EF00  F006         	goto	u140
  1829  000BFC                     u141:
  1830  000BFC  EF02  F006         	goto	l1032
  1831  000C00                     u140:
  1832  000C00  EF28  F006         	goto	l1048
  1833  000C04                     l1032:
  1834  000C04  4A32               	infsnz	Keypad_Key_Press@tec^0,f,c
  1835  000C06  2A33               	incf	(Keypad_Key_Press@tec+1)^0,f,c
  1836  000C08                     
  1837                           ;main.c: 52:         if (PORTDbits.RD2 == 1) break; tec++;
  1838  000C08  A483               	btfss	131,2,c	;volatile
  1839  000C0A  EF09  F006         	goto	u151
  1840  000C0E  EF0B  F006         	goto	u150
  1841  000C12                     u151:
  1842  000C12  EF0D  F006         	goto	l1038
  1843  000C16                     u150:
  1844  000C16  EF28  F006         	goto	l1048
  1845  000C1A                     l1038:
  1846  000C1A  4A32               	infsnz	Keypad_Key_Press@tec^0,f,c
  1847  000C1C  2A33               	incf	(Keypad_Key_Press@tec+1)^0,f,c
  1848  000C1E                     
  1849                           ;main.c: 53:         if (PORTDbits.RD3 == 1) break; tec++;
  1850  000C1E  A683               	btfss	131,3,c	;volatile
  1851  000C20  EF14  F006         	goto	u161
  1852  000C24  EF16  F006         	goto	u160
  1853  000C28                     u161:
  1854  000C28  EF18  F006         	goto	l1044
  1855  000C2C                     u160:
  1856  000C2C  EF28  F006         	goto	l1048
  1857  000C30                     l1044:
  1858  000C30  4A32               	infsnz	Keypad_Key_Press@tec^0,f,c
  1859  000C32  2A33               	incf	(Keypad_Key_Press@tec+1)^0,f,c
  1860                           
  1861                           ;main.c: 54:     }
  1862  000C34  90D8               	bcf	status,0,c
  1863  000C36  3634               	rlcf	Keypad_Key_Press@fila^0,f,c
  1864  000C38  3635               	rlcf	(Keypad_Key_Press@fila+1)^0,f,c
  1865  000C3A  5035               	movf	(Keypad_Key_Press@fila+1)^0,w,c
  1866  000C3C  E109               	bnz	u170
  1867  000C3E  0E10               	movlw	16
  1868  000C40  5C34               	subwf	Keypad_Key_Press@fila^0,w,c
  1869  000C42  A0D8               	btfss	status,0,c
  1870  000C44  EF26  F006         	goto	u171
  1871  000C48  EF28  F006         	goto	u170
  1872  000C4C                     u171:
  1873  000C4C  EFEB  F005         	goto	l1020
  1874  000C50                     u170:
  1875  000C50                     l1048:
  1876                           
  1877                           ;main.c: 55:     PORTD = 0x00;
  1878  000C50  0E00               	movlw	0
  1879  000C52  6E83               	movwf	131,c	;volatile
  1880  000C54                     
  1881                           ;main.c: 56:     return keypad_deco[tec];
  1882  000C54  0E21               	movlw	low Keypad_Key_Press@keypad_deco
  1883  000C56  2432               	addwf	Keypad_Key_Press@tec^0,w,c
  1884  000C58  6ED9               	movwf	fsr2l,c
  1885  000C5A  0E00               	movlw	high Keypad_Key_Press@keypad_deco
  1886  000C5C  2033               	addwfc	(Keypad_Key_Press@tec+1)^0,w,c
  1887  000C5E  6EDA               	movwf	fsr2h,c
  1888  000C60  50DF               	movf	indf2,w,c
  1889  000C62  0012               	return		;funcret
  1890  000C64                     __end_of_Keypad_Key_Press:
  1891                           	callstack 0
  1892                           
  1893 ;; *************** function _SYSTEM_Initialize *****************
  1894 ;; Defined at:
  1895 ;;		line 116 in file "mcc_generated_files/mcc.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;		None
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, status,2, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1909 ;;      Params:         0       0       0       0       0       0       0       0       0
  1910 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1912 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1913 ;;Total ram usage:        0 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    1
  1916 ;; This function calls:
  1917 ;;		_OSCILLATOR_Initialize
  1918 ;;		_PIN_MANAGER_Initialize
  1919 ;; This function is called by:
  1920 ;;		_main
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           	psect	text13
  1925  00103C                     __ptext13:
  1926                           	callstack 0
  1927  00103C                     _SYSTEM_Initialize:
  1928                           	callstack 29
  1929  00103C                     
  1930                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
  1931  00103C  EC57  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  1932                           
  1933                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
  1934  001040  EC0E  F008         	call	_OSCILLATOR_Initialize	;wreg free
  1935  001044  0012               	return		;funcret
  1936  001046                     __end_of_SYSTEM_Initialize:
  1937                           	callstack 0
  1938                           
  1939 ;; *************** function _PIN_MANAGER_Initialize *****************
  1940 ;; Defined at:
  1941 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;		None
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1955 ;;      Params:         0       0       0       0       0       0       0       0       0
  1956 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1958 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1959 ;;Total ram usage:        0 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_SYSTEM_Initialize
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text14
  1969  000EAE                     __ptext14:
  1970                           	callstack 0
  1971  000EAE                     _PIN_MANAGER_Initialize:
  1972                           	callstack 29
  1973  000EAE                     
  1974                           ;mcc_generated_files/pin_manager.c: 57:     LATE = 0x00;
  1975  000EAE  0E00               	movlw	0
  1976  000EB0  6E8D               	movwf	141,c	;volatile
  1977                           
  1978                           ;mcc_generated_files/pin_manager.c: 58:     LATD = 0x00;
  1979  000EB2  0E00               	movlw	0
  1980  000EB4  6E8C               	movwf	140,c	;volatile
  1981                           
  1982                           ;mcc_generated_files/pin_manager.c: 59:     LATA = 0x00;
  1983  000EB6  0E00               	movlw	0
  1984  000EB8  6E89               	movwf	137,c	;volatile
  1985                           
  1986                           ;mcc_generated_files/pin_manager.c: 60:     LATB = 0x00;
  1987  000EBA  0E00               	movlw	0
  1988  000EBC  6E8A               	movwf	138,c	;volatile
  1989                           
  1990                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  1991  000EBE  0E00               	movlw	0
  1992  000EC0  6E8B               	movwf	139,c	;volatile
  1993                           
  1994                           ;mcc_generated_files/pin_manager.c: 66:     TRISE = 0x07;
  1995  000EC2  0E07               	movlw	7
  1996  000EC4  6E96               	movwf	150,c	;volatile
  1997  000EC6                     
  1998                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0xFF;
  1999  000EC6  6892               	setf	146,c	;volatile
  2000  000EC8                     
  2001                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xFF;
  2002  000EC8  6893               	setf	147,c	;volatile
  2003                           
  2004                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xC7;
  2005  000ECA  0EC7               	movlw	199
  2006  000ECC  6E94               	movwf	148,c	;volatile
  2007  000ECE                     
  2008                           ;mcc_generated_files/pin_manager.c: 70:     TRISD = 0xFF;
  2009  000ECE  6895               	setf	149,c	;volatile
  2010                           
  2011                           ;mcc_generated_files/pin_manager.c: 75:     ANSELC = 0xC4;
  2012  000ED0  0EC4               	movlw	196
  2013  000ED2  010F               	movlb	15	; () banked
  2014  000ED4  6F5D               	movwf	93,b	;volatile
  2015                           
  2016                           ;mcc_generated_files/pin_manager.c: 76:     ANSELB = 0x3F;
  2017  000ED6  0E3F               	movlw	63
  2018  000ED8  6F5C               	movwf	92,b	;volatile
  2019  000EDA                     
  2020                           ; BSR set to: 15
  2021                           ;mcc_generated_files/pin_manager.c: 77:     ANSELD = 0xFF;
  2022  000EDA  695E               	setf	94,b	;volatile
  2023                           
  2024                           ;mcc_generated_files/pin_manager.c: 78:     ANSELE = 0x07;
  2025  000EDC  0E07               	movlw	7
  2026  000EDE  6F5F               	movwf	95,b	;volatile
  2027                           
  2028                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x2F;
  2029  000EE0  0E2F               	movlw	47
  2030  000EE2  6F5B               	movwf	91,b	;volatile
  2031  000EE4                     
  2032                           ; BSR set to: 15
  2033                           ;mcc_generated_files/pin_manager.c: 84:     WPUB = 0xFF;
  2034  000EE4  6885               	setf	133,c	;volatile
  2035  000EE6                     
  2036                           ; BSR set to: 15
  2037                           ;mcc_generated_files/pin_manager.c: 85:     INTCON2bits.nRBPU = 0;
  2038  000EE6  9EF1               	bcf	241,7,c	;volatile
  2039  000EE8                     
  2040                           ; BSR set to: 15
  2041  000EE8  0012               	return		;funcret
  2042  000EEA                     __end_of_PIN_MANAGER_Initialize:
  2043                           	callstack 0
  2044                           
  2045 ;; *************** function _OSCILLATOR_Initialize *****************
  2046 ;; Defined at:
  2047 ;;		line 123 in file "mcc_generated_files/mcc.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;		None
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2061 ;;      Params:         0       0       0       0       0       0       0       0       0
  2062 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2064 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2065 ;;Total ram usage:        0 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_SYSTEM_Initialize
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text15
  2075  00101C                     __ptext15:
  2076                           	callstack 0
  2077  00101C                     _OSCILLATOR_Initialize:
  2078                           	callstack 29
  2079  00101C                     
  2080                           ;mcc_generated_files/mcc.c: 126:     OSCCON = 0x10;
  2081  00101C  0E10               	movlw	16
  2082  00101E  6ED3               	movwf	211,c	;volatile
  2083                           
  2084                           ;mcc_generated_files/mcc.c: 128:     OSCCON2 = 0x00;
  2085  001020  0E00               	movlw	0
  2086  001022  6ED2               	movwf	210,c	;volatile
  2087                           
  2088                           ;mcc_generated_files/mcc.c: 130:     OSCTUNE = 0x00;
  2089  001024  0E00               	movlw	0
  2090  001026  6E9B               	movwf	155,c	;volatile
  2091                           
  2092                           ;mcc_generated_files/mcc.c: 132:     ACTCON = 0x00;
  2093  001028  0E00               	movlw	0
  2094  00102A  6EB5               	movwf	181,c	;volatile
  2095  00102C  0012               	return		;funcret
  2096  00102E                     __end_of_OSCILLATOR_Initialize:
  2097                           	callstack 0
  2098                           
  2099 ;; *************** function _Lcd_Init *****************
  2100 ;; Defined at:
  2101 ;;		line 62 in file "./lcd.h"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2115 ;;      Params:         0       0       0       0       0       0       0       0       0
  2116 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2117 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2118 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2119 ;;Total ram usage:        1 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    2
  2122 ;; This function calls:
  2123 ;;		_Lcd_Cmd
  2124 ;;		_Lcd_Port
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text16
  2131  000C64                     __ptext16:
  2132                           	callstack 0
  2133  000C64                     _Lcd_Init:
  2134                           	callstack 28
  2135  000C64                     
  2136                           ;./lcd.h: 64:   Lcd_Port(0x00);
  2137  000C64  0E00               	movlw	0
  2138  000C66  ECD5  F006         	call	_Lcd_Port
  2139  000C6A                     
  2140                           ;./lcd.h: 65:    _delay((unsigned long)((20)*(4000000/4000.0)));
  2141  000C6A  0E1A               	movlw	26
  2142  000C6C  6E24               	movwf	??_Lcd_Init^0,c
  2143  000C6E  0EF8               	movlw	248
  2144  000C70                     u707:
  2145  000C70  2EE8               	decfsz	wreg,f,c
  2146  000C72  D7FE               	bra	u707
  2147  000C74  2E24               	decfsz	??_Lcd_Init^0,f,c
  2148  000C76  D7FC               	bra	u707
  2149  000C78  D000               	nop2	
  2150  000C7A                     
  2151                           ;./lcd.h: 66:   Lcd_Cmd(0x03);
  2152  000C7A  0E03               	movlw	3
  2153  000C7C  ECF0  F007         	call	_Lcd_Cmd
  2154  000C80                     
  2155                           ;./lcd.h: 67:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2156  000C80  0E07               	movlw	7
  2157  000C82  6E24               	movwf	??_Lcd_Init^0,c
  2158  000C84  0E7D               	movlw	125
  2159  000C86                     u717:
  2160  000C86  2EE8               	decfsz	wreg,f,c
  2161  000C88  D7FE               	bra	u717
  2162  000C8A  2E24               	decfsz	??_Lcd_Init^0,f,c
  2163  000C8C  D7FC               	bra	u717
  2164  000C8E  F000               	nop	
  2165  000C90                     
  2166                           ;./lcd.h: 68:   Lcd_Cmd(0x03);
  2167  000C90  0E03               	movlw	3
  2168  000C92  ECF0  F007         	call	_Lcd_Cmd
  2169  000C96                     
  2170                           ;./lcd.h: 69:  _delay((unsigned long)((11)*(4000000/4000.0)));
  2171  000C96  0E0F               	movlw	15
  2172  000C98  6E24               	movwf	??_Lcd_Init^0,c
  2173  000C9A  0E48               	movlw	72
  2174  000C9C                     u727:
  2175  000C9C  2EE8               	decfsz	wreg,f,c
  2176  000C9E  D7FE               	bra	u727
  2177  000CA0  2E24               	decfsz	??_Lcd_Init^0,f,c
  2178  000CA2  D7FC               	bra	u727
  2179  000CA4                     
  2180                           ;./lcd.h: 70:   Lcd_Cmd(0x03);
  2181  000CA4  0E03               	movlw	3
  2182  000CA6  ECF0  F007         	call	_Lcd_Cmd
  2183  000CAA                     
  2184                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  2185  000CAA  0E02               	movlw	2
  2186  000CAC  ECF0  F007         	call	_Lcd_Cmd
  2187  000CB0                     
  2188                           ;./lcd.h: 73:   Lcd_Cmd(0x02);
  2189  000CB0  0E02               	movlw	2
  2190  000CB2  ECF0  F007         	call	_Lcd_Cmd
  2191  000CB6                     
  2192                           ;./lcd.h: 74:   Lcd_Cmd(0x08);
  2193  000CB6  0E08               	movlw	8
  2194  000CB8  ECF0  F007         	call	_Lcd_Cmd
  2195  000CBC                     
  2196                           ;./lcd.h: 75:   Lcd_Cmd(0x00);
  2197  000CBC  0E00               	movlw	0
  2198  000CBE  ECF0  F007         	call	_Lcd_Cmd
  2199  000CC2                     
  2200                           ;./lcd.h: 76:   Lcd_Cmd(0x0C);
  2201  000CC2  0E0C               	movlw	12
  2202  000CC4  ECF0  F007         	call	_Lcd_Cmd
  2203  000CC8                     
  2204                           ;./lcd.h: 77:   Lcd_Cmd(0x00);
  2205  000CC8  0E00               	movlw	0
  2206  000CCA  ECF0  F007         	call	_Lcd_Cmd
  2207  000CCE                     
  2208                           ;./lcd.h: 78:   Lcd_Cmd(0x06);
  2209  000CCE  0E06               	movlw	6
  2210  000CD0  ECF0  F007         	call	_Lcd_Cmd
  2211  000CD4  0012               	return		;funcret
  2212  000CD6                     __end_of_Lcd_Init:
  2213                           	callstack 0
  2214                           
  2215 ;; *************** function _Lcd_Cmd *****************
  2216 ;; Defined at:
  2217 ;;		line 26 in file "./lcd.h"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;  a               1    wreg     unsigned char 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  a               1    2[COMRAM] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, status,2, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2231 ;;      Params:         0       0       0       0       0       0       0       0       0
  2232 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2233 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2234 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2235 ;;Total ram usage:        2 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    1
  2238 ;; This function calls:
  2239 ;;		_Lcd_Port
  2240 ;; This function is called by:
  2241 ;;		_Lcd_Clear
  2242 ;;		_Lcd_Set_Cursor
  2243 ;;		_Lcd_Init
  2244 ;;		_Lcd_Shift_Right
  2245 ;;		_Lcd_Shift_Left
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           	psect	text17
  2250  000FE0                     __ptext17:
  2251                           	callstack 0
  2252  000FE0                     _Lcd_Cmd:
  2253                           	callstack 25
  2254                           
  2255                           ;incstack = 0
  2256                           ;Lcd_Cmd@a stored from wreg
  2257  000FE0  6E23               	movwf	Lcd_Cmd@a^0,c
  2258  000FE2                     
  2259                           ;./lcd.h: 26: void Lcd_Cmd(char a);./lcd.h: 27: {;./lcd.h: 28:  PORTBbits.RB7 = 0;
  2260  000FE2  9E81               	bcf	129,7,c	;volatile
  2261  000FE4                     
  2262                           ;./lcd.h: 29:  Lcd_Port(a);
  2263  000FE4  5023               	movf	Lcd_Cmd@a^0,w,c
  2264  000FE6  ECD5  F006         	call	_Lcd_Port
  2265  000FEA                     
  2266                           ;./lcd.h: 30:  PORTBbits.RB6 = 1;
  2267  000FEA  8C81               	bsf	129,6,c	;volatile
  2268  000FEC                     
  2269                           ;./lcd.h: 31:         _delay((unsigned long)((4)*(4000000/4000.0)));
  2270  000FEC  0E06               	movlw	6
  2271  000FEE  6E22               	movwf	??_Lcd_Cmd^0,c
  2272  000FF0  0E30               	movlw	48
  2273  000FF2                     u737:
  2274  000FF2  2EE8               	decfsz	wreg,f,c
  2275  000FF4  D7FE               	bra	u737
  2276  000FF6  2E22               	decfsz	??_Lcd_Cmd^0,f,c
  2277  000FF8  D7FC               	bra	u737
  2278  000FFA  D000               	nop2	
  2279  000FFC                     
  2280                           ;./lcd.h: 32:         PORTBbits.RB6 = 0;
  2281  000FFC  9C81               	bcf	129,6,c	;volatile
  2282  000FFE  0012               	return		;funcret
  2283  001000                     __end_of_Lcd_Cmd:
  2284                           	callstack 0
  2285                           
  2286 ;; *************** function _Lcd_Port *****************
  2287 ;; Defined at:
  2288 ;;		line 4 in file "./lcd.h"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  a               1    wreg     unsigned char 
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  a               1    0[COMRAM] unsigned char 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2302 ;;      Params:         0       0       0       0       0       0       0       0       0
  2303 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2305 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2306 ;;Total ram usage:        1 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; This function calls:
  2309 ;;		Nothing
  2310 ;; This function is called by:
  2311 ;;		_Lcd_Cmd
  2312 ;;		_Lcd_Init
  2313 ;;		_Lcd_Write_Char
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text18
  2318  000DAA                     __ptext18:
  2319                           	callstack 0
  2320  000DAA                     _Lcd_Port:
  2321                           	callstack 25
  2322                           
  2323                           ;incstack = 0
  2324                           ;Lcd_Port@a stored from wreg
  2325  000DAA  6E21               	movwf	Lcd_Port@a^0,c
  2326  000DAC                     
  2327                           ;./lcd.h: 4: void Lcd_Port(char a);./lcd.h: 5: {;./lcd.h: 6:  if(a & 1)
  2328  000DAC  A021               	btfss	Lcd_Port@a^0,0,c
  2329  000DAE  EFDB  F006         	goto	u11
  2330  000DB2  EFDD  F006         	goto	u10
  2331  000DB6                     u11:
  2332  000DB6  EFE0  F006         	goto	l97
  2333  000DBA                     u10:
  2334  000DBA                     
  2335                           ;./lcd.h: 7:   PORTBbits.RB5 = 1;
  2336  000DBA  8A81               	bsf	129,5,c	;volatile
  2337  000DBC  EFE1  F006         	goto	l920
  2338  000DC0                     l97:
  2339                           
  2340                           ;./lcd.h: 9:   PORTBbits.RB5 = 0;
  2341  000DC0  9A81               	bcf	129,5,c	;volatile
  2342  000DC2                     l920:
  2343                           
  2344                           ;./lcd.h: 11:  if(a & 2)
  2345  000DC2  A221               	btfss	Lcd_Port@a^0,1,c
  2346  000DC4  EFE6  F006         	goto	u21
  2347  000DC8  EFE8  F006         	goto	u20
  2348  000DCC                     u21:
  2349  000DCC  EFEB  F006         	goto	l99
  2350  000DD0                     u20:
  2351  000DD0                     
  2352                           ;./lcd.h: 12:   PORTBbits.RB4 = 1;
  2353  000DD0  8881               	bsf	129,4,c	;volatile
  2354  000DD2  EFEC  F006         	goto	l924
  2355  000DD6                     l99:
  2356                           
  2357                           ;./lcd.h: 14:   PORTBbits.RB4 = 0;
  2358  000DD6  9881               	bcf	129,4,c	;volatile
  2359  000DD8                     l924:
  2360                           
  2361                           ;./lcd.h: 16:  if(a & 4)
  2362  000DD8  A421               	btfss	Lcd_Port@a^0,2,c
  2363  000DDA  EFF1  F006         	goto	u31
  2364  000DDE  EFF3  F006         	goto	u30
  2365  000DE2                     u31:
  2366  000DE2  EFF6  F006         	goto	l101
  2367  000DE6                     u30:
  2368  000DE6                     
  2369                           ;./lcd.h: 17:   PORTBbits.RB3 = 1;
  2370  000DE6  8681               	bsf	129,3,c	;volatile
  2371  000DE8  EFF7  F006         	goto	l928
  2372  000DEC                     l101:
  2373                           
  2374                           ;./lcd.h: 19:   PORTBbits.RB3 = 0;
  2375  000DEC  9681               	bcf	129,3,c	;volatile
  2376  000DEE                     l928:
  2377                           
  2378                           ;./lcd.h: 21:  if(a & 8)
  2379  000DEE  A621               	btfss	Lcd_Port@a^0,3,c
  2380  000DF0  EFFC  F006         	goto	u41
  2381  000DF4  EFFE  F006         	goto	u40
  2382  000DF8                     u41:
  2383  000DF8  EF01  F007         	goto	l103
  2384  000DFC                     u40:
  2385  000DFC                     
  2386                           ;./lcd.h: 22:   PORTBbits.RB2 = 1;
  2387  000DFC  8481               	bsf	129,2,c	;volatile
  2388  000DFE  EF02  F007         	goto	l105
  2389  000E02                     l103:
  2390                           
  2391                           ;./lcd.h: 24:   PORTBbits.RB2 = 0;
  2392  000E02  9481               	bcf	129,2,c	;volatile
  2393  000E04                     l105:
  2394  000E04  0012               	return		;funcret
  2395  000E06                     __end_of_Lcd_Port:
  2396                           	callstack 0
  2397                           
  2398 ;; *************** function _Keypad_Init *****************
  2399 ;; Defined at:
  2400 ;;		line 34 in file "main.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;		None
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;		None
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2414 ;;      Params:         0       0       0       0       0       0       0       0       0
  2415 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2416 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2417 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2418 ;;Total ram usage:        0 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; This function calls:
  2421 ;;		Nothing
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text19
  2428  001046                     __ptext19:
  2429                           	callstack 0
  2430  001046                     _Keypad_Init:
  2431                           	callstack 30
  2432  001046                     
  2433                           ;main.c: 36:  TRISD=0B00001111;
  2434  001046  0E0F               	movlw	15
  2435  001048  6E95               	movwf	149,c	;volatile
  2436  00104A  0012               	return		;funcret
  2437  00104C                     __end_of_Keypad_Init:
  2438                           	callstack 0
  2439                           
  2440                           	psect	rparam
  2441  0000                     
  2442                           	psect	idloc
  2443                           
  2444                           ;Config register IDLOC0 @ 0x200000
  2445                           ;	unspecified, using default values
  2446  200000                     	org	2097152
  2447  200000  FF                 	db	255
  2448                           
  2449                           ;Config register IDLOC1 @ 0x200001
  2450                           ;	unspecified, using default values
  2451  200001                     	org	2097153
  2452  200001  FF                 	db	255
  2453                           
  2454                           ;Config register IDLOC2 @ 0x200002
  2455                           ;	unspecified, using default values
  2456  200002                     	org	2097154
  2457  200002  FF                 	db	255
  2458                           
  2459                           ;Config register IDLOC3 @ 0x200003
  2460                           ;	unspecified, using default values
  2461  200003                     	org	2097155
  2462  200003  FF                 	db	255
  2463                           
  2464                           ;Config register IDLOC4 @ 0x200004
  2465                           ;	unspecified, using default values
  2466  200004                     	org	2097156
  2467  200004  FF                 	db	255
  2468                           
  2469                           ;Config register IDLOC5 @ 0x200005
  2470                           ;	unspecified, using default values
  2471  200005                     	org	2097157
  2472  200005  FF                 	db	255
  2473                           
  2474                           ;Config register IDLOC6 @ 0x200006
  2475                           ;	unspecified, using default values
  2476  200006                     	org	2097158
  2477  200006  FF                 	db	255
  2478                           
  2479                           ;Config register IDLOC7 @ 0x200007
  2480                           ;	unspecified, using default values
  2481  200007                     	org	2097159
  2482  200007  FF                 	db	255
  2483                           
  2484                           	psect	config
  2485                           
  2486                           ;Config register CONFIG1L @ 0x300000
  2487                           ;	PLL Selection
  2488                           ;	PLLSEL = PLL4X, 4x clock multiplier
  2489                           ;	PLL Enable Configuration bit
  2490                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  2491                           ;	CPU System Clock Postscaler
  2492                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  2493                           ;	Low Speed USB mode with 48 MHz system clock
  2494                           ;	LS48MHZ = SYS48X8, System clock at 48 MHz, USB clock divider is set to 8
  2495  300000                     	org	3145728
  2496  300000  20                 	db	32
  2497                           
  2498                           ;Config register CONFIG1H @ 0x300001
  2499                           ;	Oscillator Selection
  2500                           ;	FOSC = XT, XT oscillator
  2501                           ;	Primary Oscillator Shutdown
  2502                           ;	PCLKEN = ON, Primary oscillator enabled
  2503                           ;	Fail-Safe Clock Monitor
  2504                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2505                           ;	Internal/External Oscillator Switchover
  2506                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2507  300001                     	org	3145729
  2508  300001  21                 	db	33
  2509                           
  2510                           ;Config register CONFIG2L @ 0x300002
  2511                           ;	Power-up Timer Enable
  2512                           ;	nPWRTEN = ON, Power up timer enabled
  2513                           ;	Brown-out Reset Enable
  2514                           ;	BOREN = SBORDIS, BOR enabled in hardware (SBOREN is ignored)
  2515                           ;	Brown-out Reset Voltage
  2516                           ;	BORV = 190, BOR set to 1.9V nominal
  2517                           ;	Low-Power Brown-out Reset
  2518                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  2519  300002                     	org	3145730
  2520  300002  5E                 	db	94
  2521                           
  2522                           ;Config register CONFIG2H @ 0x300003
  2523                           ;	Watchdog Timer Enable bits
  2524                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  2525                           ;	Watchdog Timer Postscaler
  2526                           ;	WDTPS = 32768, 1:32768
  2527  300003                     	org	3145731
  2528  300003  3C                 	db	60
  2529                           
  2530                           ; Padding undefined space
  2531  300004                     	org	3145732
  2532  300004  FF                 	db	255
  2533                           
  2534                           ;Config register CONFIG3H @ 0x300005
  2535                           ;	CCP2 MUX bit
  2536                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2537                           ;	PORTB A/D Enable bit
  2538                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  2539                           ;	Timer3 Clock Input MUX bit
  2540                           ;	T3CMX = RC0, T3CKI function is on RC0
  2541                           ;	SDO Output MUX bit
  2542                           ;	SDOMX = RB3, SDO function is on RB3
  2543                           ;	Master Clear Reset Pin Enable
  2544                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  2545  300005                     	org	3145733
  2546  300005  D3                 	db	211
  2547                           
  2548                           ;Config register CONFIG4L @ 0x300006
  2549                           ;	Stack Full/Underflow Reset
  2550                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2551                           ;	Single-Supply ICSP Enable bit
  2552                           ;	LVP = OFF, Single-Supply ICSP disabled
  2553                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  2554                           ;	ICPRT = OFF, ICPORT disabled
  2555                           ;	Extended Instruction Set Enable bit
  2556                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  2557                           ;	Background Debugger Enable bit
  2558                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  2559  300006                     	org	3145734
  2560  300006  81                 	db	129
  2561                           
  2562                           ; Padding undefined space
  2563  300007                     	org	3145735
  2564  300007  FF                 	db	255
  2565                           
  2566                           ;Config register CONFIG5L @ 0x300008
  2567                           ;	Block 0 Code Protect
  2568                           ;	CP0 = OFF, Block 0 is not code-protected
  2569                           ;	Block 1 Code Protect
  2570                           ;	CP1 = OFF, Block 1 is not code-protected
  2571                           ;	Block 2 Code Protect
  2572                           ;	CP2 = OFF, Block 2 is not code-protected
  2573                           ;	Block 3 Code Protect
  2574                           ;	CP3 = OFF, Block 3 is not code-protected
  2575  300008                     	org	3145736
  2576  300008  0F                 	db	15
  2577                           
  2578                           ;Config register CONFIG5H @ 0x300009
  2579                           ;	Boot Block Code Protect
  2580                           ;	CPB = OFF, Boot block is not code-protected
  2581                           ;	Data EEPROM Code Protect
  2582                           ;	CPD = OFF, Data EEPROM is not code-protected
  2583  300009                     	org	3145737
  2584  300009  C0                 	db	192
  2585                           
  2586                           ;Config register CONFIG6L @ 0x30000A
  2587                           ;	Block 0 Write Protect
  2588                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  2589                           ;	Block 1 Write Protect
  2590                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  2591                           ;	Block 2 Write Protect
  2592                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  2593                           ;	Block 3 Write Protect
  2594                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  2595  30000A                     	org	3145738
  2596  30000A  0F                 	db	15
  2597                           
  2598                           ;Config register CONFIG6H @ 0x30000B
  2599                           ;	Configuration Registers Write Protect
  2600                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2601                           ;	Boot Block Write Protect
  2602                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2603                           ;	Data EEPROM Write Protect
  2604                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2605  30000B                     	org	3145739
  2606  30000B  E0                 	db	224
  2607                           
  2608                           ;Config register CONFIG7L @ 0x30000C
  2609                           ;	Block 0 Table Read Protect
  2610                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2611                           ;	Block 1 Table Read Protect
  2612                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2613                           ;	Block 2 Table Read Protect
  2614                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2615                           ;	Block 3 Table Read Protect
  2616                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2617  30000C                     	org	3145740
  2618  30000C  0F                 	db	15
  2619                           
  2620                           ;Config register CONFIG7H @ 0x30000D
  2621                           ;	Boot Block Table Read Protect
  2622                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2623  30000D                     	org	3145741
  2624  30000D  40                 	db	64
  2625                           tosu	equ	0xFFF
  2626                           tosh	equ	0xFFE
  2627                           tosl	equ	0xFFD
  2628                           stkptr	equ	0xFFC
  2629                           pclatu	equ	0xFFB
  2630                           pclath	equ	0xFFA
  2631                           pcl	equ	0xFF9
  2632                           tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           tblptrl	equ	0xFF6
  2635                           tablat	equ	0xFF5
  2636                           prodh	equ	0xFF4
  2637                           prodl	equ	0xFF3
  2638                           indf0	equ	0xFEF
  2639                           postinc0	equ	0xFEE
  2640                           postdec0	equ	0xFED
  2641                           preinc0	equ	0xFEC
  2642                           plusw0	equ	0xFEB
  2643                           fsr0h	equ	0xFEA
  2644                           fsr0l	equ	0xFE9
  2645                           wreg	equ	0xFE8
  2646                           indf1	equ	0xFE7
  2647                           postinc1	equ	0xFE6
  2648                           postdec1	equ	0xFE5
  2649                           preinc1	equ	0xFE4
  2650                           plusw1	equ	0xFE3
  2651                           fsr1h	equ	0xFE2
  2652                           fsr1l	equ	0xFE1
  2653                           bsr	equ	0xFE0
  2654                           indf2	equ	0xFDF
  2655                           postinc2	equ	0xFDE
  2656                           postdec2	equ	0xFDD
  2657                           preinc2	equ	0xFDC
  2658                           plusw2	equ	0xFDB
  2659                           fsr2h	equ	0xFDA
  2660                           fsr2l	equ	0xFD9
  2661                           status	equ	0xFD8

Data Sizes:
    Strings     28
    Constant    17
    Data        2
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     26      60
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> retardo_cad(COMRAM[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 13
		 -> STR_4(CODE[8]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_miretardo
    _miretardo->_teclado_estado
    _teclado_estado->_atoi
    _change_password->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _atoi->_isspace
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6056
                        _Keypad_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                  _SYSTEM_Initialize
                          _miretardo
 ---------------------------------------------------------------------------------
 (1) _miretardo                                            2     0      2    4379
                                             24 COMRAM     2     0      2
                     _teclado_estado
 ---------------------------------------------------------------------------------
 (2) _teclado_estado                                       2     2      0    4280
                                             22 COMRAM     2     2      0
                   _Keypad_Key_Press
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                               _atoi
                    _change_password
 ---------------------------------------------------------------------------------
 (3) _change_password                                      0     0      0    1542
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_String                                     6     4      2     514
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (5) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       5     4      1     953
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _atoi                                                15    13      2    1076
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Keypad_Key_Press                                    21    21      0      75
                                              0 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (6) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keypad_Init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _miretardo
     _teclado_estado
       _Keypad_Key_Press
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _atoi
         ___wmul
         _isdigit
         _isspace
       _change_password
         _Lcd_Clear
           _Lcd_Cmd
             _Lcd_Port
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_Port
         _Lcd_Write_String
           _Lcd_Write_Char
             _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1A      3C       1       63.2%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3C       6        0.0%
DATA                 0      0      3C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Dec  9 16:38:20 2020

                             l15 1044                               l18 102C  
                             l55 0EE8                               l97 0DC0  
                             l99 0DD6                               u10 0DBA  
                             u11 0DB6                               u20 0DD0  
                             u21 0DCC                               u30 0DE6  
                             u31 0DE2                               u40 0DFC  
                             u41 0DF8              ___wmul@multiplicand 0023  
                            l101 0DEC                              l103 0E02  
                            l111 103A                              l120 0CD4  
                            l105 0E04                              l123 0F20  
                            l108 0FFE                              l117 0DA8  
                            l129 0E5A                              l162 101A  
                            l148 104A                              l181 0A22  
                            l159 0C62                              l187 0F8A  
                            l198 0FDE                              l900 0BAC  
                            l903 0F58                              l911 0EAC  
                            l920 0DC2                              l930 0DFC  
                            l922 0DD0                              l924 0DD8  
                            l916 0DAC                              l940 0FFC  
                            l932 0FE2                              l926 0DE6  
                            l918 0DBA                              l934 0FE4  
                            l950 0F04                              l942 0EEC  
                            l928 0DEE                              l936 0FEA  
                            l960 0F1E                              l952 0F0C  
                            l944 0EF8                              l938 0FEC  
                            l962 102E                              l954 0F0E  
                            l946 0EFA                              l956 0F14  
                            l948 0F02                              l958 0F16  
                            l897 0BA4                              u120 0BBC  
                            u130 0BEA                              u131 0BE6  
                            u140 0C00                              u141 0BFC  
                            u150 0C16                              u151 0C12  
                            u160 0C2C                              u400 0E5A  
                            u161 0C28                              u401 0E56  
                            u170 0C50                              u410 0E74  
                            u171 0C4C                              u411 0E70  
                            u420 0EA2                              u500 0B76  
                            u421 0E9E                              u501 0B72  
                            u430 0F52                              u510 0B88  
                            u431 0F4C                              u511 0B84  
                            u440 0F54                              u600 0996  
                            u520 084A                              u601 0992  
                            u521 0846                              u450 0A5A  
                            u610 09A8                              u530 085C  
                            u451 0A56                              u611 09A4  
                            u531 0858                              u460 0A8E  
                            u380 0D56                              u540 0874  
                            u620 0F8A                              u461 0A8A  
                            u381 0D52                              u541 0870  
                            u621 0F86                              u470 0AAA  
                            u390 0D8A                              u550 08BA  
                            u630 0D2E                              u471 0AA6  
                            u391 0D86                              u551 08B6  
                            u631 0D28                              u480 0B5E  
                            u560 08E6                              u481 0B58  
                            u561 08E2                              u490 0B60  
                            u570 0912                              u707 0C70  
                            u571 090E                              u580 093E  
                            u717 0C86                              u581 093A  
                            u645 0D30                              u590 0950  
                            u727 0C9C                              u591 094C  
                            u737 0FF2                              u657 0F60  
                            u667 0898                              u677 0976  
                            u687 0F06                              u697 0F18  
                            wreg 000FE8                             l1010 0BAE  
                           l1020 0BD6                             l1012 0BC6  
                           l1110 0EDA                             l1102 0EAE  
                           l1022 0BDC                             l1014 0BCE  
                           l1112 0EE4                             l1104 0EC6  
                           l1040 0C1E                             l1032 0C04  
                           l1114 0EE6                             l1106 0EC8  
                           l1050 0C54                             l1034 0C08  
                           l1026 0BEE                             l1220 0C7A  
                           l1116 101C                             l1108 0ECE  
                           l1044 0C30                             l1028 0BF2  
                           l1230 0CAA                             l1222 0C80  
                           l1214 103C                             l1046 0C3A  
                           l1038 0C1A                             l1240 0CC8  
                           l1232 0CB0                             l1224 0C90  
                           l1216 0C64                             l1048 0C50  
                           l1242 0CCE                             l1234 0CB6  
                           l1226 0C96                             l1218 0C6A  
                           l1410 0AF0                             l1402 0A98  
                           l1244 1046                             l1236 0CBC  
                           l1228 0CA4                             l1420 0B76  
                           l1404 0AAE                             l1340 0D6E  
                           l1500 0996                             l1238 0CC2  
                           l1422 0B88                             l1414 0B28  
                           l1406 0AB6                             l1342 0D78  
                           l1334 0D46                             l1350 0E06  
                           l1510 09C6                             l1502 09A8  
                           l1430 083A                             l1360 0FD6  
                           l1408 0ABE                             l1344 0D8A  
                           l1336 0D56                             l1352 0E12  
                           l1512 09D0                             l1504 09AA  
                           l1440 087A                             l1432 084A  
                           l1370 0EA2                             l1418 0B64  
                           l1610 0ADA                             l1346 0D9C  
                           l1338 0D68                             l1354 0E2E  
                           l1506 09AE                             l1450 08BA  
                           l1442 087E                             l1434 085C  
                           l1530 0F6A                             l1372 0EA6  
                           l1364 0E5C                             l1348 0DA2  
                           l1356 0E32                             l1380 1000  
                           l1508 09C2                             l1460 08D6  
                           l1452 08BE                             l1444 0888  
                           l1436 0864                             l1428 0830  
                           l1532 0F70                             l1524 0F5A  
                           l1540 0CE4                             l1358 0FBA  
                           l1366 0E60                             l1390 0A3C  
                           l1382 1004                             l1462 08E6  
                           l1454 08C2                             l1446 088E  
                           l1438 0874                             l1518 09E0  
                           l1526 0F5E                             l1550 0CFC  
                           l1542 0CE8                             l1534 0CD6  
                           l1376 0F22                             l1368 0E74  
                           l1392 0A40                             l1384 100E  
                           l1608 09F4                             l1480 0924  
                           l1472 0902                             l1464 08EA  
                           l1456 08CC                             l1448 08AA  
                           l1528 0F66                             l1560 0D1A  
                           l1552 0D00                             l1544 0CEC  
                           l1536 0CDA                             l1394 0A5A  
                           l1386 0A24                             l1490 0952  
                           l1474 0912                             l1466 08EE  
                           l1562 0D1C                             l1554 0D0A  
                           l1546 0CF0                             l1538 0CE0  
                           l1396 0A8E                             l1388 0A38  
                           l1492 0956                             l1484 092E  
                           l1476 0916                             l1468 08F8  
                           l1564 0D1E                             l1556 0D16  
                           l1548 0CF8                             l1398 0A92  
                           l1494 0960                             l1486 093E  
                           l1478 091A                             l1566 0D30  
                           l1558 0D18                             l1496 096C  
                           l1488 0950                             l1498 0986  
                           STR_1 0812                             STR_2 0827  
                           STR_3 0827                             STR_4 081F  
  __end_ofKeypad_Key_Press@F4959 0812                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           _WPUB 000F85                ?_Lcd_Write_String 0025  
                           _atoi 0A24                             _main 0CD6  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr2l 000FD9                             prodh 000FF4  
                           prodl 000FF3                             start 0000  
             ??_Lcd_Write_String 0027                  __end_of_Lcd_Cmd 1000  
                   ___param_bank 000000   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 102E                            ?_atoi 0028  
                          ?_main 0021                            _LATA0 007C48  
                          _LATC0 007C58                    ??_Keypad_Init 0021  
                          _PORTD 000F83          __size_of_Lcd_Set_Cursor 0066  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                  __end_of_isdigit 0F5A  
                          _tecla 0016                            atoi@n 0035  
                          atoi@s 0028                            _texto 0001  
                _change_password 1000                  __end_of_isspace 0EAE  
                          tablat 000FF5                            status 000FD8  
               __end_of_Lcd_Init 0CD6                 __end_of_Lcd_Port 0E06  
                __initialization 0F8C                     __end_of_atoi 0BAE  
                   __end_of_main 0D44                   _teclado_estado 0830  
                         ??_atoi 002A                           ??_main 003B  
             __size_of_Lcd_Clear 000E                    __activetblptr 000002  
    Keypad_Key_Press@keypad_deco 0021                           _ACTCON 000FB5  
                         _ANSELA 000F5B                           _ANSELB 000F5C  
                         _ANSELC 000F5D                           _ANSELD 000F5E  
                         _ANSELE 000F5F              __end_of_Keypad_Init 104C  
                         _OSCCON 000FD3                        ??_Lcd_Cmd 0022  
        __size_of_Lcd_Write_Char 0038                           _TRISA0 007C90  
                         _TRISC0 007CA0                           ___wmul 0FBA  
         __end_of_teclado_estado 0A24        __size_of_Keypad_Key_Press 00B6  
                         clear_0 0FAA                     __pdataCOMRAM 003B  
                      ??_isdigit 0023          __end_of_change_password 101C  
                   __mediumconst 0000                        ??_isspace 0023  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                  Lcd_Set_Cursor@a 0025  
                Lcd_Set_Cursor@b 0024                  Lcd_Set_Cursor@y 0027  
                Lcd_Set_Cursor@z 0026                _SYSTEM_Initialize 103C  
                     __accesstop 0060          __end_of__initialization 0FB0  
             ?_SYSTEM_Initialize 0021                __end_of_Lcd_Clear 103C  
                  ___rparam_used 000001                   __pcstackCOMRAM 0021  
            ??_SYSTEM_Initialize 0021                  ?_teclado_estado 0021  
                 _Lcd_Set_Cursor 0D44                      _Keypad_Init 1046  
                      ?_Lcd_Init 0021                        ?_Lcd_Port 0021  
      __end_of_SYSTEM_Initialize 1046               __size_of_miretardo 0032  
                        ?___wmul 0021        __size_of_Lcd_Write_String 0056  
         __end_of_Lcd_Set_Cursor 0DAA                 ?_change_password 0021  
                        _OSCCON2 000FD2                          _OSCTUNE 000F9B  
                     ??_Lcd_Init 0024                       ??_Lcd_Port 0021  
                 _Lcd_Write_Char 0EEA                          _Lcd_Cmd 0FE0  
          Keypad_Key_Press@F4959 0801                          __Hparam 0000  
                        __Lparam 0000                  __size_of___wmul 0026  
               _Keypad_Key_Press 0BAE                     __psmallconst 0800  
                        __pcinit 0F8C                          __ramtop 0800  
                ?_Lcd_Set_Cursor 0024                          __ptext0 0CD6  
                        __ptext1 0F5A                          __ptext2 0830  
                        __ptext3 1000                          __ptext4 0E06  
                        __ptext5 0EEA                          __ptext6 0D44  
                        __ptext7 102E                          __ptext8 0A24  
                        __ptext9 0E5C            _OSCILLATOR_Initialize 101C  
                        _isdigit 0F22         ??_PIN_MANAGER_Initialize 0021  
                        _isspace 0E5C                          _retardo 003B  
                        atoi@neg 002E                __end_of_miretardo 0F8C  
     __size_of_SYSTEM_Initialize 000A           __end_of_Lcd_Write_Char 0F22  
           end_of_initialization 0FB0                    __Lmediumconst 0000  
                        postinc0 000FEE                          postinc2 000FDE  
                      Lcd_Port@a 0021                        _PORTBbits 000F81  
                      _PORTDbits 000F83                  ?_Lcd_Write_Char 0021  
                 _estado_teclado 0015                Lcd_Write_String@a 0025  
              Lcd_Write_String@i 0029                 ??_teclado_estado 0037  
                      _Lcd_Clear 102E                   __end_of___wmul 0FE0  
               _Lcd_Write_String 0E06                    __pidataCOMRAM 104C  
         ?_OSCILLATOR_Initialize 0021                     ?_Keypad_Init 0021  
            start_initialization 0F8C  __size_of_PIN_MANAGER_Initialize 003C  
                 miretardo@valor 0039                __size_of_Lcd_Init 0072  
              __size_of_Lcd_Port 005C                       ?_Lcd_Clear 0021  
                       ??___wmul 0025                  Lcd_Write_Char@a 0024  
                Lcd_Write_Char@y 0023                      __pbssCOMRAM 0001  
       __end_of_Keypad_Key_Press 0C64                         ?_Lcd_Cmd 0021  
         _PIN_MANAGER_Initialize 0EAE                 ??_Lcd_Set_Cursor 0025  
                    __smallconst 0800                         ?_isdigit 0021  
                       ?_isspace 0021             Keypad_Key_Press@fila 0034  
       __size_of_change_password 001C                        _miretardo 0F5A  
                 ___wmul@product 0025                         Lcd_Cmd@a 0023  
                    ??_Lcd_Clear 0024                ___wmul@multiplier 0021  
               ??_Lcd_Write_Char 0022                         _Lcd_Init 0C64  
           __size_of_Keypad_Init 0006                         _Lcd_Port 0DAA  
                    _INTCON2bits 000FF1         __end_of_Lcd_Write_String 0E5C  
                     ?_miretardo 0039                 __size_of_Lcd_Cmd 0020  
                       __Hrparam 0000                         __Lrparam 0000  
        ??_OSCILLATOR_Initialize 0021                         _atoi$751 0030  
                       _atoi$752 0034                         _atoi$753 0032  
               __size_of_isdigit 0038                 __size_of_isspace 0052  
                       __ptext10 0F22                         __ptext11 0FBA  
                       __ptext12 0BAE                         __ptext13 103C  
                       __ptext14 0EAE                         __ptext15 101C  
                       __ptext16 0C64                         __ptext17 0FE0  
                       __ptext18 0DAA                         __ptext19 1046  
            Keypad_Key_Press@tec 0032                    __size_of_atoi 018A  
                  __size_of_main 006E                ??_change_password 002B  
                    _isspace$769 0027                         isdigit@c 0021  
             Lcd_Write_Char@temp 0022                ?_Keypad_Key_Press 0021  
                    ??_miretardo 003B                         isspace@c 0021  
        ?_PIN_MANAGER_Initialize 0021               ??_Keypad_Key_Press 0021  
                    _retardo_cad 0017               Lcd_Set_Cursor@temp 0028  
        __size_of_teclado_estado 01F4   __end_of_PIN_MANAGER_Initialize 0EEA  
